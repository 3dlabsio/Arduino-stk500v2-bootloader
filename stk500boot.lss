
stk500boot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  0003f79a  0000182e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000179a  0003e000  0003e000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800204  00800204  00001832  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001832  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001844  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00001884  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003025  00000000  00000000  000018cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e92  00000000  00000000  000048f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f42  00000000  00000000  00005783  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  000066c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cb8  00000000  00000000  00006880  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ab7  00000000  00000000  00007538  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00008fef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0003e000 <__vectors>:
   3e000:	0d 94 89 f1 	jmp	0x3e312	; 0x3e312 <__ctors_end>
   3e004:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e008:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e00c:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e010:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e014:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e018:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e01c:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e020:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e024:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e028:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e02c:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e030:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e034:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e038:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e03c:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e040:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e044:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e048:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e04c:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e050:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e054:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e058:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e05c:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e060:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e064:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e068:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e06c:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e070:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e074:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e078:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e07c:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e080:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e084:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e088:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e08c:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e090:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e094:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e098:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e09c:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e0a0:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e0a4:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e0a8:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e0ac:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e0b0:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e0b4:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e0b8:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e0bc:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e0c0:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e0c4:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e0c8:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e0cc:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e0d0:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e0d4:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e0d8:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e0dc:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>
   3e0e0:	0d 94 b2 f1 	jmp	0x3e364	; 0x3e364 <__bad_interrupt>

0003e0e4 <__trampolines_end>:
   3e0e4:	2a 00       	.word	0x002a	; ????

0003e0e6 <gTextMsg_HELP_MSG_Y>:
   3e0e6:	59 3d 50 6f 72 74 20 62 6c 69 6e 6b 00              Y=Port blink.

0003e0f3 <gTextMsg_HELP_MSG_V>:
   3e0f3:	56 3d 73 68 6f 77 20 69 6e 74 65 72 72 75 70 74     V=show interrupt
   3e103:	20 56 65 63 74 6f 72 73 00                           Vectors.

0003e10c <gTextMsg_HELP_MSG_R>:
   3e10c:	52 3d 44 75 6d 70 20 52 41 4d 00                    R=Dump RAM.

0003e117 <gTextMsg_HELP_MSG_Q>:
   3e117:	51 3d 51 75 69 74 00                                Q=Quit.

0003e11e <gTextMsg_HELP_MSG_L>:
   3e11e:	4c 3d 4c 69 73 74 20 49 2f 4f 20 50 6f 72 74 73     L=List I/O Ports
	...

0003e12f <gTextMsg_HELP_MSG_H>:
   3e12f:	48 3d 48 65 6c 70 00                                H=Help.

0003e136 <gTextMsg_HELP_MSG_F>:
   3e136:	46 3d 44 75 6d 70 20 46 4c 41 53 48 00              F=Dump FLASH.

0003e143 <gTextMsg_HELP_MSG_E>:
   3e143:	45 3d 44 75 6d 70 20 45 45 50 52 4f 4d 00           E=Dump EEPROM.

0003e151 <gTextMsg_HELP_MSG_B>:
   3e151:	42 3d 42 6c 69 6e 6b 20 4c 45 44 00                 B=Blink LED.

0003e15d <gTextMsg_HELP_MSG_AT>:
   3e15d:	40 3d 45 45 50 52 4f 4d 20 74 65 73 74 00           @=EEPROM test.

0003e16b <gTextMsg_HELP_MSG_QM>:
   3e16b:	3f 3d 43 50 55 20 73 74 61 74 73 00                 ?=CPU stats.

0003e177 <gTextMsg_HELP_MSG_0>:
   3e177:	30 3d 5a 65 72 6f 20 61 64 64 72 00                 0=Zero addr.

0003e183 <gTextMsg_PORT>:
   3e183:	50 4f 52 54 00                                      PORT.

0003e188 <gTextMsg_EEPROMerrorCnt>:
   3e188:	45 45 20 65 72 72 20 63 6e 74 3d 00                 EE err cnt=.

0003e194 <gTextMsg_ReadingEEprom>:
   3e194:	52 65 61 64 69 6e 67 20 45 45 00                    Reading EE.

0003e19f <gTextMsg_WriteToEEprom>:
   3e19f:	57 72 69 74 74 69 6e 67 20 45 45 00                 Writting EE.

0003e1ab <gTextMsg_SPACE>:
   3e1ab:	20 00                                                .

0003e1ad <gTextMsg_MustBeLetter>:
   3e1ad:	4d 75 73 74 20 62 65 20 61 20 6c 65 74 74 65 72     Must be a letter
	...

0003e1be <gTextMsg_PortNotSupported>:
   3e1be:	50 6f 72 74 20 6e 6f 74 20 73 75 70 70 6f 72 74     Port not support
   3e1ce:	65 64 00                                            ed.

0003e1d1 <gTextMsg_WHAT_PORT>:
   3e1d1:	57 68 61 74 20 70 6f 72 74 3a 00                    What port:.

0003e1dc <gTextMsg_jmp>:
   3e1dc:	6a 6d 70 20 00                                      jmp .

0003e1e1 <gTextMsg_rjmp>:
   3e1e1:	72 6a 6d 70 20 20 00                                rjmp  .

0003e1e8 <gTextMsg_noVector>:
   3e1e8:	6e 6f 20 76 65 63 74 6f 72 00                       no vector.

0003e1f2 <gTextMsg_VECTOR_HEADER>:
   3e1f2:	56 23 20 20 20 41 44 44 52 20 20 20 6f 70 20 63     V#   ADDR   op c
   3e202:	6f 64 65 20 20 20 20 20 69 6e 73 74 72 75 63 74     ode     instruct
   3e212:	69 6f 6e 20 61 64 64 72 20 20 20 49 6e 74 65 72     ion addr   Inter
   3e222:	72 75 70 74 00                                      rupt.

0003e227 <gTextMsg_GCC_VERSION_STR>:
   3e227:	35 2e 34 2e 30 00                                   5.4.0.

0003e22d <gTextMsg_AVR_LIBC_VER_STR>:
   3e22d:	32 2e 30 2e 30 00                                   2.0.0.

0003e233 <gTextMsg_GCC_DATE_STR>:
   3e233:	4d 61 72 20 31 36 20 32 30 32 32 00                 Mar 16 2022.

0003e23f <gTextMsg_FUSE_BYTE_LOCK>:
   3e23f:	4c 6f 63 6b 20 66 75 73 65 20 20 20 3d 20 00        Lock fuse   = .

0003e24e <gTextMsg_FUSE_BYTE_EXT>:
   3e24e:	45 78 74 20 66 75 73 65 20 20 20 20 3d 20 00        Ext fuse    = .

0003e25d <gTextMsg_FUSE_BYTE_HIGH>:
   3e25d:	48 69 67 68 20 66 75 73 65 20 20 20 3d 20 00        High fuse   = .

0003e26c <gTextMsg_FUSE_BYTE_LOW>:
   3e26c:	4c 6f 77 20 66 75 73 65 20 20 20 20 3d 20 00        Low fuse    = .

0003e27b <gTextMsg_CPU_SIGNATURE>:
   3e27b:	43 50 55 20 49 44 20 20 20 20 20 20 3d 20 00        CPU ID      = .

0003e28a <gTextMsg_GCC_VERSION>:
   3e28a:	47 43 43 20 56 65 72 73 69 6f 6e 20 3d 20 00        GCC Version = .

0003e299 <gTextMsg_AVR_LIBC>:
   3e299:	41 56 52 20 4c 69 62 43 20 56 65 72 3d 20 00        AVR LibC Ver= .

0003e2a8 <gTextMsg_AVR_ARCH>:
   3e2a8:	5f 5f 41 56 52 5f 41 52 43 48 5f 5f 3d 20 00        __AVR_ARCH__= .

0003e2b7 <gTextMsg_CPU_Type>:
   3e2b7:	43 50 55 20 54 79 70 65 20 20 20 20 3d 20 00        CPU Type    = .

0003e2c6 <gTextMsg_COMPILED_ON>:
   3e2c6:	43 6f 6d 70 69 6c 65 64 20 6f 6e 20 3d 20 00        Compiled on = .

0003e2d5 <gTextMsg_HUH>:
   3e2d5:	48 75 68 3f 00                                      Huh?.

0003e2da <gTextMsg_Prompt>:
   3e2da:	42 6f 6f 74 6c 6f 61 64 65 72 3e 00                 Bootloader>.

0003e2e6 <gTextMsg_Explorer>:
   3e2e6:	41 72 64 75 69 6e 6f 20 65 78 70 6c 6f 72 65 72     Arduino explorer
   3e2f6:	20 73 74 6b 35 30 30 56 32 20 62 79 20 4d 4c 53      stk500V2 by MLS
	...

0003e307 <gTextMsg_CPU_Name>:
   3e307:	41 54 6d 65 67 61 32 35 36 30 00                    ATmega2560.

0003e312 <__ctors_end>:
   3e312:	11 24       	eor	r1, r1
   3e314:	1f be       	out	0x3f, r1	; 63
   3e316:	cf ef       	ldi	r28, 0xFF	; 255
   3e318:	d1 e2       	ldi	r29, 0x21	; 33
   3e31a:	de bf       	out	0x3e, r29	; 62
   3e31c:	cd bf       	out	0x3d, r28	; 61
   3e31e:	01 e0       	ldi	r16, 0x01	; 1
   3e320:	0c bf       	out	0x3c, r16	; 60

0003e322 <__do_copy_data>:
   3e322:	12 e0       	ldi	r17, 0x02	; 2
   3e324:	a0 e0       	ldi	r26, 0x00	; 0
   3e326:	b2 e0       	ldi	r27, 0x02	; 2
   3e328:	ea e9       	ldi	r30, 0x9A	; 154
   3e32a:	f7 ef       	ldi	r31, 0xF7	; 247
   3e32c:	03 e0       	ldi	r16, 0x03	; 3
   3e32e:	0b bf       	out	0x3b, r16	; 59
   3e330:	02 c0       	rjmp	.+4      	; 0x3e336 <__do_copy_data+0x14>
   3e332:	07 90       	elpm	r0, Z+
   3e334:	0d 92       	st	X+, r0
   3e336:	a4 30       	cpi	r26, 0x04	; 4
   3e338:	b1 07       	cpc	r27, r17
   3e33a:	d9 f7       	brne	.-10     	; 0x3e332 <__do_copy_data+0x10>

0003e33c <__do_clear_bss>:
   3e33c:	22 e0       	ldi	r18, 0x02	; 2
   3e33e:	a4 e0       	ldi	r26, 0x04	; 4
   3e340:	b2 e0       	ldi	r27, 0x02	; 2
   3e342:	01 c0       	rjmp	.+2      	; 0x3e346 <.do_clear_bss_start>

0003e344 <.do_clear_bss_loop>:
   3e344:	1d 92       	st	X+, r1

0003e346 <.do_clear_bss_start>:
   3e346:	a2 31       	cpi	r26, 0x12	; 18
   3e348:	b2 07       	cpc	r27, r18
   3e34a:	e1 f7       	brne	.-8      	; 0x3e344 <.do_clear_bss_loop>
   3e34c:	0f 94 f8 f2 	call	0x3e5f0	; 0x3e5f0 <main>
   3e350:	0d 94 cb fb 	jmp	0x3f796	; 0x3f796 <_exit>

0003e354 <__jumpMain>:

	asm volatile ( ".set __stack, %0" :: "i" (RAMEND) );

//*	set stack pointer to top of RAM

	asm volatile ( "ldi	16, %0" :: "i" (RAMEND >> 8) );
   3e354:	01 e2       	ldi	r16, 0x21	; 33
	asm volatile ( "out %0,16" :: "i" (AVR_STACK_POINTER_HI_ADDR) );
   3e356:	0e bf       	out	0x3e, r16	; 62

	asm volatile ( "ldi	16, %0" :: "i" (RAMEND & 0x0ff) );
   3e358:	0f ef       	ldi	r16, 0xFF	; 255
	asm volatile ( "out %0,16" :: "i" (AVR_STACK_POINTER_LO_ADDR) );
   3e35a:	0d bf       	out	0x3d, r16	; 61

	asm volatile ( "clr __zero_reg__" );									// GCC depends on register r1 set to 0
   3e35c:	11 24       	eor	r1, r1
	asm volatile ( "out %0, __zero_reg__" :: "I" (_SFR_IO_ADDR(SREG)) );	// set SREG to 0
   3e35e:	1f be       	out	0x3f, r1	; 63
	asm volatile ( "jmp main");												// jump to main()
   3e360:	0d 94 f8 f2 	jmp	0x3e5f0	; 0x3e5f0 <main>

0003e364 <__bad_interrupt>:
   3e364:	0d 94 00 f0 	jmp	0x3e000	; 0x3e000 <__vectors>

0003e368 <sendchar>:
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3e368:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3e36c:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
   3e370:	86 ff       	sbrs	r24, 6
   3e372:	fc cf       	rjmp	.-8      	; 0x3e36c <sendchar+0x4>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3e374:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
   3e378:	80 64       	ori	r24, 0x40	; 64
   3e37a:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
   3e37e:	08 95       	ret

0003e380 <delay_ms>:

//*****************************************************************************
void delay_ms(unsigned int timedelay)
{
	unsigned int i;
	for (i=0;i<timedelay;i++)
   3e380:	20 e0       	ldi	r18, 0x00	; 0
   3e382:	30 e0       	ldi	r19, 0x00	; 0
   3e384:	28 17       	cp	r18, r24
   3e386:	39 07       	cpc	r19, r25
   3e388:	49 f0       	breq	.+18     	; 0x3e39c <delay_ms+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
   3e38a:	ef ec       	ldi	r30, 0xCF	; 207
   3e38c:	f7 e0       	ldi	r31, 0x07	; 7
   3e38e:	31 97       	sbiw	r30, 0x01	; 1
   3e390:	f1 f7       	brne	.-4      	; 0x3e38e <delay_ms+0xe>
   3e392:	00 c0       	rjmp	.+0      	; 0x3e394 <delay_ms+0x14>
   3e394:	00 00       	nop
   3e396:	2f 5f       	subi	r18, 0xFF	; 255
   3e398:	3f 4f       	sbci	r19, 0xFF	; 255
   3e39a:	f4 cf       	rjmp	.-24     	; 0x3e384 <delay_ms+0x4>
	{
		_delay_ms(0.5);
	}
}
   3e39c:	08 95       	ret

0003e39e <PrintFromPROGMEM_p>:
	const char	gTextMsg_END[]				PROGMEM	=	"*";


//************************************************************************
void	PrintFromPROGMEM_p(const char *dataPtr, unsigned char offset)
{
   3e39e:	0f 93       	push	r16
   3e3a0:	1f 93       	push	r17
   3e3a2:	cf 93       	push	r28
   3e3a4:	df 93       	push	r29
   3e3a6:	8c 01       	movw	r16, r24
   3e3a8:	d6 2f       	mov	r29, r22
	theChar		=	1;

	while (theChar != 0)
	{
	#if (FLASHEND > 0x10000)
		theChar	=	pgm_read_byte_far(dataPtr + ii);
   3e3aa:	c8 01       	movw	r24, r16
   3e3ac:	8d 0f       	add	r24, r29
   3e3ae:	91 1d       	adc	r25, r1
   3e3b0:	09 2e       	mov	r0, r25
   3e3b2:	00 0c       	add	r0, r0
   3e3b4:	aa 0b       	sbc	r26, r26
   3e3b6:	bb 0b       	sbc	r27, r27
   3e3b8:	ab bf       	out	0x3b, r26	; 59
   3e3ba:	fc 01       	movw	r30, r24
   3e3bc:	c7 91       	elpm	r28, Z+
	#else
		theChar	=	pgm_read_byte_near(dataPtr + ii);
	#endif
		if (theChar != 0)
   3e3be:	cc 23       	and	r28, r28
   3e3c0:	19 f0       	breq	.+6      	; 0x3e3c8 <PrintFromPROGMEM_p+0x2a>
		{
			sendchar(theChar);
   3e3c2:	8c 2f       	mov	r24, r28
   3e3c4:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <sendchar>
		}
		ii++;
   3e3c8:	df 5f       	subi	r29, 0xFF	; 255
char	theChar;

	ii			=	offset;
	theChar		=	1;

	while (theChar != 0)
   3e3ca:	c1 11       	cpse	r28, r1
   3e3cc:	ee cf       	rjmp	.-36     	; 0x3e3aa <PrintFromPROGMEM_p+0xc>
		{
			sendchar(theChar);
		}
		ii++;
	}
}
   3e3ce:	df 91       	pop	r29
   3e3d0:	cf 91       	pop	r28
   3e3d2:	1f 91       	pop	r17
   3e3d4:	0f 91       	pop	r16
   3e3d6:	08 95       	ret

0003e3d8 <PrintNewLine>:

//************************************************************************
void	PrintNewLine(void)
{
	sendchar(0x0d);
   3e3d8:	8d e0       	ldi	r24, 0x0D	; 13
   3e3da:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <sendchar>
	sendchar(0x0a);
   3e3de:	8a e0       	ldi	r24, 0x0A	; 10
   3e3e0:	0d 94 b4 f1 	jmp	0x3e368	; 0x3e368 <sendchar>

0003e3e4 <PrintFromPROGMEMln_p>:


//************************************************************************
void	PrintFromPROGMEMln_p(const char *dataPtr, unsigned char offset)
{
	PrintFromPROGMEM_p(dataPtr, offset);
   3e3e4:	0f 94 cf f1 	call	0x3e39e	; 0x3e39e <PrintFromPROGMEM_p>

	PrintNewLine();
   3e3e8:	0d 94 ec f1 	jmp	0x3e3d8	; 0x3e3d8 <PrintNewLine>

0003e3ec <PrintString>:
}


//************************************************************************
void	PrintString(char *textString)
{
   3e3ec:	cf 93       	push	r28
   3e3ee:	df 93       	push	r29
   3e3f0:	ec 01       	movw	r28, r24

	theChar		=	1;
	ii			=	0;
	while (theChar != 0)
	{
		theChar	=	textString[ii];
   3e3f2:	89 91       	ld	r24, Y+
		if (theChar != 0)
   3e3f4:	88 23       	and	r24, r24
   3e3f6:	19 f0       	breq	.+6      	; 0x3e3fe <PrintString+0x12>
		{
			sendchar(theChar);
   3e3f8:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <sendchar>
   3e3fc:	fa cf       	rjmp	.-12     	; 0x3e3f2 <PrintString+0x6>
		}
		ii++;
	}
}
   3e3fe:	df 91       	pop	r29
   3e400:	cf 91       	pop	r28
   3e402:	08 95       	ret

0003e404 <PrintHexByte>:

//************************************************************************
void	PrintHexByte(unsigned char theByte)
{
   3e404:	cf 93       	push	r28
   3e406:	c8 2f       	mov	r28, r24
char	theChar;

	theChar	=	0x30 + ((theByte >> 4) & 0x0f);
   3e408:	98 2f       	mov	r25, r24
   3e40a:	92 95       	swap	r25
   3e40c:	9f 70       	andi	r25, 0x0F	; 15
   3e40e:	80 e3       	ldi	r24, 0x30	; 48
   3e410:	89 0f       	add	r24, r25
	if (theChar > 0x39)
   3e412:	8a 33       	cpi	r24, 0x3A	; 58
   3e414:	10 f0       	brcs	.+4      	; 0x3e41a <PrintHexByte+0x16>
	{
		theChar	+=	7;
   3e416:	87 e3       	ldi	r24, 0x37	; 55
   3e418:	89 0f       	add	r24, r25
	}
	sendchar(theChar );
   3e41a:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <sendchar>

	theChar	=	0x30 + (theByte & 0x0f);
   3e41e:	cf 70       	andi	r28, 0x0F	; 15
   3e420:	80 e3       	ldi	r24, 0x30	; 48
   3e422:	8c 0f       	add	r24, r28
	if (theChar > 0x39)
   3e424:	8a 33       	cpi	r24, 0x3A	; 58
   3e426:	10 f0       	brcs	.+4      	; 0x3e42c <PrintHexByte+0x28>
	{
		theChar	+=	7;
   3e428:	87 e3       	ldi	r24, 0x37	; 55
   3e42a:	8c 0f       	add	r24, r28
	}
	sendchar(theChar );
}
   3e42c:	cf 91       	pop	r28
	theChar	=	0x30 + (theByte & 0x0f);
	if (theChar > 0x39)
	{
		theChar	+=	7;
	}
	sendchar(theChar );
   3e42e:	0d 94 b4 f1 	jmp	0x3e368	; 0x3e368 <sendchar>

0003e432 <PrintDecInt>:
}

//************************************************************************
void	PrintDecInt(int theNumber, int digitCnt)
{
   3e432:	0f 93       	push	r16
   3e434:	1f 93       	push	r17
   3e436:	cf 93       	push	r28
   3e438:	df 93       	push	r29
   3e43a:	ec 01       	movw	r28, r24
   3e43c:	8b 01       	movw	r16, r22
int	theChar;
int	myNumber;

	myNumber	=	theNumber;

	if ((myNumber > 100) || (digitCnt >= 3))
   3e43e:	85 36       	cpi	r24, 0x65	; 101
   3e440:	91 05       	cpc	r25, r1
   3e442:	1c f4       	brge	.+6      	; 0x3e44a <PrintDecInt+0x18>
   3e444:	63 30       	cpi	r22, 0x03	; 3
   3e446:	71 05       	cpc	r23, r1
   3e448:	4c f0       	brlt	.+18     	; 0x3e45c <PrintDecInt+0x2a>
	{
		theChar		=	0x30 + myNumber / 100;
		sendchar(theChar );
   3e44a:	ce 01       	movw	r24, r28
   3e44c:	64 e6       	ldi	r22, 0x64	; 100
   3e44e:	70 e0       	ldi	r23, 0x00	; 0
   3e450:	0f 94 64 fb 	call	0x3f6c8	; 0x3f6c8 <__divmodhi4>
   3e454:	80 e3       	ldi	r24, 0x30	; 48
   3e456:	86 0f       	add	r24, r22
   3e458:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <sendchar>
	}

	if ((myNumber > 10) || (digitCnt >= 2))
   3e45c:	cb 30       	cpi	r28, 0x0B	; 11
   3e45e:	d1 05       	cpc	r29, r1
   3e460:	1c f4       	brge	.+6      	; 0x3e468 <PrintDecInt+0x36>
   3e462:	02 30       	cpi	r16, 0x02	; 2
   3e464:	11 05       	cpc	r17, r1
   3e466:	6c f0       	brlt	.+26     	; 0x3e482 <PrintDecInt+0x50>
	{
		theChar	=	0x30  + ((myNumber % 100) / 10 );
		sendchar(theChar );
   3e468:	ce 01       	movw	r24, r28
   3e46a:	64 e6       	ldi	r22, 0x64	; 100
   3e46c:	70 e0       	ldi	r23, 0x00	; 0
   3e46e:	0f 94 64 fb 	call	0x3f6c8	; 0x3f6c8 <__divmodhi4>
   3e472:	6a e0       	ldi	r22, 0x0A	; 10
   3e474:	70 e0       	ldi	r23, 0x00	; 0
   3e476:	0f 94 64 fb 	call	0x3f6c8	; 0x3f6c8 <__divmodhi4>
   3e47a:	80 e3       	ldi	r24, 0x30	; 48
   3e47c:	86 0f       	add	r24, r22
   3e47e:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <sendchar>
	}
	theChar	=	0x30 + (myNumber % 10);
	sendchar(theChar );
   3e482:	ce 01       	movw	r24, r28
   3e484:	6a e0       	ldi	r22, 0x0A	; 10
   3e486:	70 e0       	ldi	r23, 0x00	; 0
   3e488:	0f 94 64 fb 	call	0x3f6c8	; 0x3f6c8 <__divmodhi4>
   3e48c:	80 5d       	subi	r24, 0xD0	; 208
}
   3e48e:	df 91       	pop	r29
   3e490:	cf 91       	pop	r28
   3e492:	1f 91       	pop	r17
   3e494:	0f 91       	pop	r16
	{
		theChar	=	0x30  + ((myNumber % 100) / 10 );
		sendchar(theChar );
	}
	theChar	=	0x30 + (myNumber % 10);
	sendchar(theChar );
   3e496:	0d 94 b4 f1 	jmp	0x3e368	; 0x3e368 <sendchar>

0003e49a <recchar>:
/*
 * Read single byte from USART, block if no data available
 */
static unsigned char recchar(void)
{
	while (!(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE)))
   3e49a:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
   3e49e:	87 ff       	sbrs	r24, 7
   3e4a0:	fc cf       	rjmp	.-8      	; 0x3e49a <recchar>
	{
		// wait for data
	}
	return UART_DATA_REG;
   3e4a2:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
}
   3e4a6:	08 95       	ret

0003e4a8 <PrintAvailablePort>:
	}
}

//************************************************************************
static void	PrintAvailablePort(char thePortLetter)
{
   3e4a8:	cf 93       	push	r28
   3e4aa:	c8 2f       	mov	r28, r24
	PrintFromPROGMEM_p(gTextMsg_PORT, 0);
   3e4ac:	60 e0       	ldi	r22, 0x00	; 0
   3e4ae:	83 e8       	ldi	r24, 0x83	; 131
   3e4b0:	91 ee       	ldi	r25, 0xE1	; 225
   3e4b2:	0f 94 cf f1 	call	0x3e39e	; 0x3e39e <PrintFromPROGMEM_p>
	sendchar(thePortLetter);
   3e4b6:	8c 2f       	mov	r24, r28
   3e4b8:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <sendchar>
	PrintNewLine();
}
   3e4bc:	cf 91       	pop	r28
//************************************************************************
static void	PrintAvailablePort(char thePortLetter)
{
	PrintFromPROGMEM_p(gTextMsg_PORT, 0);
	sendchar(thePortLetter);
	PrintNewLine();
   3e4be:	0d 94 ec f1 	jmp	0x3e3d8	; 0x3e3d8 <PrintNewLine>

0003e4c2 <DumpHex.constprop.0>:
	kDUMP_EEPROM,
	kDUMP_RAM
};

//************************************************************************
static void	DumpHex(unsigned char dumpWhat, unsigned long startAddress, unsigned char numRows)
   3e4c2:	2f 92       	push	r2
   3e4c4:	3f 92       	push	r3
   3e4c6:	4f 92       	push	r4
   3e4c8:	5f 92       	push	r5
   3e4ca:	6f 92       	push	r6
   3e4cc:	7f 92       	push	r7
   3e4ce:	8f 92       	push	r8
   3e4d0:	9f 92       	push	r9
   3e4d2:	af 92       	push	r10
   3e4d4:	bf 92       	push	r11
   3e4d6:	cf 92       	push	r12
   3e4d8:	df 92       	push	r13
   3e4da:	ef 92       	push	r14
   3e4dc:	ff 92       	push	r15
   3e4de:	0f 93       	push	r16
   3e4e0:	1f 93       	push	r17
   3e4e2:	cf 93       	push	r28
   3e4e4:	df 93       	push	r29
   3e4e6:	cd b7       	in	r28, 0x3d	; 61
   3e4e8:	de b7       	in	r29, 0x3e	; 62
   3e4ea:	63 97       	sbiw	r28, 0x13	; 19
   3e4ec:	0f b6       	in	r0, 0x3f	; 63
   3e4ee:	f8 94       	cli
   3e4f0:	de bf       	out	0x3e, r29	; 62
   3e4f2:	0f be       	out	0x3f, r0	; 63
   3e4f4:	cd bf       	out	0x3d, r28	; 61
   3e4f6:	08 2f       	mov	r16, r24
   3e4f8:	6a 01       	movw	r12, r20
   3e4fa:	7b 01       	movw	r14, r22
   3e4fc:	80 e1       	ldi	r24, 0x10	; 16
   3e4fe:	38 2e       	mov	r3, r24
char			asciiDump[18];
unsigned char	*ramPtr;


	ramPtr				=	0;
	theValue			=	0;
   3e500:	10 e0       	ldi	r17, 0x00	; 0
   3e502:	4e 01       	movw	r8, r28
   3e504:	81 e1       	ldi	r24, 0x11	; 17
   3e506:	88 0e       	add	r8, r24
   3e508:	91 1c       	adc	r9, r1
	myAddressPointer	=	startAddress;
	while (numRows > 0)
	{
		if (myAddressPointer > 0x10000)
   3e50a:	91 e0       	ldi	r25, 0x01	; 1
   3e50c:	c9 16       	cp	r12, r25
   3e50e:	d1 04       	cpc	r13, r1
   3e510:	e9 06       	cpc	r14, r25
   3e512:	f1 04       	cpc	r15, r1
   3e514:	18 f0       	brcs	.+6      	; 0x3e51c <DumpHex.constprop.0+0x5a>
		{
			PrintHexByte((myAddressPointer >> 16) & 0x00ff);
   3e516:	8e 2d       	mov	r24, r14
   3e518:	0f 94 02 f2 	call	0x3e404	; 0x3e404 <PrintHexByte>
		}
		PrintHexByte((myAddressPointer >> 8) & 0x00ff);
   3e51c:	8d 2d       	mov	r24, r13
   3e51e:	0f 94 02 f2 	call	0x3e404	; 0x3e404 <PrintHexByte>
		PrintHexByte(myAddressPointer & 0x00ff);
   3e522:	8c 2d       	mov	r24, r12
   3e524:	0f 94 02 f2 	call	0x3e404	; 0x3e404 <PrintHexByte>
		sendchar(0x20);
   3e528:	80 e2       	ldi	r24, 0x20	; 32
   3e52a:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <sendchar>
		sendchar('-');
   3e52e:	8d e2       	ldi	r24, 0x2D	; 45
   3e530:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <sendchar>
		sendchar(0x20);
   3e534:	80 e2       	ldi	r24, 0x20	; 32
   3e536:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <sendchar>

		asciiDump[0]		=	0;
   3e53a:	19 82       	std	Y+1, r1	; 0x01
   3e53c:	fe 01       	movw	r30, r28
   3e53e:	31 96       	adiw	r30, 0x01	; 1
   3e540:	5f 01       	movw	r10, r30
   3e542:	26 01       	movw	r4, r12
   3e544:	37 01       	movw	r6, r14
   3e546:	2e 2e       	mov	r2, r30
   3e548:	bb 8a       	std	Y+19, r11	; 0x13
		for (ii=0; ii<16; ii++)
		{
			switch(dumpWhat)
   3e54a:	01 30       	cpi	r16, 0x01	; 1
   3e54c:	51 f0       	breq	.+20     	; 0x3e562 <DumpHex.constprop.0+0xa0>
   3e54e:	28 f0       	brcs	.+10     	; 0x3e55a <DumpHex.constprop.0+0x98>
   3e550:	02 30       	cpi	r16, 0x02	; 2
   3e552:	59 f4       	brne	.+22     	; 0x3e56a <DumpHex.constprop.0+0xa8>
				case kDUMP_EEPROM:
					theValue	=	eeprom_read_byte((uint8_t *)(uint16_t)myAddressPointer);
					break;

				case kDUMP_RAM:
					theValue	=	ramPtr[myAddressPointer];
   3e554:	f2 01       	movw	r30, r4
   3e556:	10 81       	ld	r17, Z
   3e558:	08 c0       	rjmp	.+16     	; 0x3e56a <DumpHex.constprop.0+0xa8>
		{
			switch(dumpWhat)
			{
				case kDUMP_FLASH:
				#if (FLASHEND > 0x10000)
					theValue	=	pgm_read_byte_far(myAddressPointer);
   3e55a:	6b be       	out	0x3b, r6	; 59
   3e55c:	f2 01       	movw	r30, r4
   3e55e:	17 91       	elpm	r17, Z+
   3e560:	04 c0       	rjmp	.+8      	; 0x3e56a <DumpHex.constprop.0+0xa8>
					theValue	=	pgm_read_byte_near(myAddressPointer);
				#endif
					break;

				case kDUMP_EEPROM:
					theValue	=	eeprom_read_byte((uint8_t *)(uint16_t)myAddressPointer);
   3e562:	c2 01       	movw	r24, r4
   3e564:	0f 94 b5 fb 	call	0x3f76a	; 0x3f76a <eeprom_read_byte>
   3e568:	18 2f       	mov	r17, r24
				case kDUMP_RAM:
					theValue	=	ramPtr[myAddressPointer];
					break;

			}
			PrintHexByte(theValue);
   3e56a:	81 2f       	mov	r24, r17
   3e56c:	0f 94 02 f2 	call	0x3e404	; 0x3e404 <PrintHexByte>
			sendchar(0x20);
   3e570:	80 e2       	ldi	r24, 0x20	; 32
   3e572:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <sendchar>
			if ((theValue >= 0x20) && (theValue < 0x7f))
   3e576:	80 ee       	ldi	r24, 0xE0	; 224
   3e578:	81 0f       	add	r24, r17
   3e57a:	8f 35       	cpi	r24, 0x5F	; 95
   3e57c:	18 f4       	brcc	.+6      	; 0x3e584 <DumpHex.constprop.0+0xc2>
			{
				asciiDump[ii % 16]	=	theValue;
   3e57e:	f5 01       	movw	r30, r10
   3e580:	10 83       	st	Z, r17
   3e582:	03 c0       	rjmp	.+6      	; 0x3e58a <DumpHex.constprop.0+0xc8>
			}
			else
			{
				asciiDump[ii % 16]	=	'.';
   3e584:	8e e2       	ldi	r24, 0x2E	; 46
   3e586:	f5 01       	movw	r30, r10
   3e588:	80 83       	st	Z, r24
			}

			myAddressPointer++;
   3e58a:	9f ef       	ldi	r25, 0xFF	; 255
   3e58c:	49 1a       	sub	r4, r25
   3e58e:	59 0a       	sbc	r5, r25
   3e590:	69 0a       	sbc	r6, r25
   3e592:	79 0a       	sbc	r7, r25
   3e594:	ef ef       	ldi	r30, 0xFF	; 255
   3e596:	ae 1a       	sub	r10, r30
   3e598:	be 0a       	sbc	r11, r30
		sendchar(0x20);
		sendchar('-');
		sendchar(0x20);

		asciiDump[0]		=	0;
		for (ii=0; ii<16; ii++)
   3e59a:	a8 14       	cp	r10, r8
   3e59c:	b9 04       	cpc	r11, r9
   3e59e:	a9 f6       	brne	.-86     	; 0x3e54a <DumpHex.constprop.0+0x88>
   3e5a0:	f0 e1       	ldi	r31, 0x10	; 16
   3e5a2:	cf 0e       	add	r12, r31
   3e5a4:	d1 1c       	adc	r13, r1
   3e5a6:	e1 1c       	adc	r14, r1
   3e5a8:	f1 1c       	adc	r15, r1
				asciiDump[ii % 16]	=	'.';
			}

			myAddressPointer++;
		}
		asciiDump[16]	=	0;
   3e5aa:	19 8a       	std	Y+17, r1	; 0x11
		PrintString(asciiDump);
   3e5ac:	82 2d       	mov	r24, r2
   3e5ae:	9b 89       	ldd	r25, Y+19	; 0x13
   3e5b0:	0f 94 f6 f1 	call	0x3e3ec	; 0x3e3ec <PrintString>
		PrintNewLine();
   3e5b4:	0f 94 ec f1 	call	0x3e3d8	; 0x3e3d8 <PrintNewLine>
   3e5b8:	3a 94       	dec	r3


	ramPtr				=	0;
	theValue			=	0;
	myAddressPointer	=	startAddress;
	while (numRows > 0)
   3e5ba:	31 10       	cpse	r3, r1
   3e5bc:	a6 cf       	rjmp	.-180    	; 0x3e50a <DumpHex.constprop.0+0x48>
		PrintString(asciiDump);
		PrintNewLine();

		numRows--;
	}
}
   3e5be:	63 96       	adiw	r28, 0x13	; 19
   3e5c0:	0f b6       	in	r0, 0x3f	; 63
   3e5c2:	f8 94       	cli
   3e5c4:	de bf       	out	0x3e, r29	; 62
   3e5c6:	0f be       	out	0x3f, r0	; 63
   3e5c8:	cd bf       	out	0x3d, r28	; 61
   3e5ca:	df 91       	pop	r29
   3e5cc:	cf 91       	pop	r28
   3e5ce:	1f 91       	pop	r17
   3e5d0:	0f 91       	pop	r16
   3e5d2:	ff 90       	pop	r15
   3e5d4:	ef 90       	pop	r14
   3e5d6:	df 90       	pop	r13
   3e5d8:	cf 90       	pop	r12
   3e5da:	bf 90       	pop	r11
   3e5dc:	af 90       	pop	r10
   3e5de:	9f 90       	pop	r9
   3e5e0:	8f 90       	pop	r8
   3e5e2:	7f 90       	pop	r7
   3e5e4:	6f 90       	pop	r6
   3e5e6:	5f 90       	pop	r5
   3e5e8:	4f 90       	pop	r4
   3e5ea:	3f 90       	pop	r3
   3e5ec:	2f 90       	pop	r2
   3e5ee:	08 95       	ret

0003e5f0 <main>:
void (*app_start)(void) = 0x0000;


//*****************************************************************************
int main(void)
{
   3e5f0:	cf 93       	push	r28
   3e5f2:	df 93       	push	r29
   3e5f4:	cd b7       	in	r28, 0x3d	; 61
   3e5f6:	de b7       	in	r29, 0x3e	; 62
   3e5f8:	ce 52       	subi	r28, 0x2E	; 46
   3e5fa:	d1 40       	sbci	r29, 0x01	; 1
   3e5fc:	0f b6       	in	r0, 0x3f	; 63
   3e5fe:	f8 94       	cli
   3e600:	de bf       	out	0x3e, r29	; 62
   3e602:	0f be       	out	0x3f, r0	; 63
   3e604:	cd bf       	out	0x3d, r28	; 61
	unsigned int	rcvdCharCntr	=	0;
#endif

	//*	some chips dont set the stack properly
	asm volatile ( ".set __stack, %0" :: "i" (RAMEND) );
	asm volatile ( "ldi	16, %0" :: "i" (RAMEND >> 8) );
   3e606:	01 e2       	ldi	r16, 0x21	; 33
	asm volatile ( "out %0,16" :: "i" (AVR_STACK_POINTER_HI_ADDR) );
   3e608:	0e bf       	out	0x3e, r16	; 62
	asm volatile ( "ldi	16, %0" :: "i" (RAMEND & 0x0ff) );
   3e60a:	0f ef       	ldi	r16, 0xFF	; 255
	asm volatile ( "out %0,16" :: "i" (AVR_STACK_POINTER_LO_ADDR) );
   3e60c:	0d bf       	out	0x3d, r16	; 61
#ifdef _FIX_ISSUE_181_
	//************************************************************************
	//*	Dec 29,	2011	<MLS> Issue #181, added watch dog timmer support
	//*	handle the watch dog timer
	uint8_t	mcuStatusReg;
	mcuStatusReg	=	MCUSR;
   3e60e:	94 b7       	in	r25, 0x34	; 52

	__asm__ __volatile__ ("cli");
   3e610:	f8 94       	cli
	__asm__ __volatile__ ("wdr");
   3e612:	a8 95       	wdr
	MCUSR	=	0;
   3e614:	14 be       	out	0x34, r1	; 52
	WDTCSR	|=	_BV(WDCE) | _BV(WDE);
   3e616:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   3e61a:	88 61       	ori	r24, 0x18	; 24
   3e61c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
	WDTCSR	=	0;
   3e620:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
	__asm__ __volatile__ ("sei");
   3e624:	78 94       	sei
	// check if WDT generated the reset, if so, go straight to app
	if (mcuStatusReg & _BV(WDRF))
   3e626:	93 ff       	sbrs	r25, 3
   3e628:	05 c0       	rjmp	.+10     	; 0x3e634 <main+0x44>
	{
		app_start();
   3e62a:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <__data_end>
   3e62e:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <__data_end+0x1>
   3e632:	19 95       	eicall
	 * Branch to bootloader or application code ?
	 */

#ifndef REMOVE_BOOTLOADER_LED
	/* PROG_PIN pulled low, indicate with LED that bootloader is active */
	PROGLED_DDR		|=	(1<<PROGLED_PIN);
   3e634:	27 9a       	sbi	0x04, 7	; 4
//	PROGLED_PORT	&=	~(1<<PROGLED_PIN);	// active low LED ON
	PROGLED_PORT	|=	(1<<PROGLED_PIN);	// active high LED ON
   3e636:	2f 9a       	sbi	0x05, 7	; 5
	/*
	 * Init UART
	 * set baudrate and enable USART receiver and transmiter without interrupts
	 */
#if UART_BAUDRATE_DOUBLE_SPEED
	UART_STATUS_REG		|=	(1 <<UART_DOUBLE_SPEED);
   3e638:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
   3e63c:	82 60       	ori	r24, 0x02	; 2
   3e63e:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
#endif
	UART_BAUD_RATE_LOW	=	UART_BAUD_SELECT(BAUDRATE,F_CPU);
   3e642:	80 e1       	ldi	r24, 0x10	; 16
   3e644:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
	UART_CONTROL_REG	=	(1 << UART_ENABLE_RECEIVER) | (1 << UART_ENABLE_TRANSMITTER);
   3e648:	88 e1       	ldi	r24, 0x18	; 24
   3e64a:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>

	asm volatile ("nop");			// wait until port has changed
   3e64e:	00 00       	nop
   3e650:	00 e0       	ldi	r16, 0x00	; 0
   3e652:	10 e0       	ldi	r17, 0x00	; 0
   3e654:	c1 2c       	mov	r12, r1
   3e656:	d1 2c       	mov	r13, r1
   3e658:	76 01       	movw	r14, r12
			if (boot_timer > boot_timeout)
			{
				boot_state	=	1; // (after ++ -> boot_state=2 bootloader timeout, jump to main 0x00000 )
			}
		#ifdef BLINK_LED_WHILE_WAITING
			if ((boot_timer % _BLINK_LOOP_COUNT_) == 0)
   3e65a:	a7 ec       	ldi	r26, 0xC7	; 199
   3e65c:	8a 2e       	mov	r8, r26
   3e65e:	ab e1       	ldi	r26, 0x1B	; 27
   3e660:	9a 2e       	mov	r9, r26
   3e662:	a1 2c       	mov	r10, r1
   3e664:	b1 2c       	mov	r11, r1


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   3e666:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
	delay_ms(100);
#endif

	while (boot_state==0)
	{
		while ((!(Serial_Available())) && (boot_state == 0))		// wait for data
   3e66a:	87 fd       	sbrc	r24, 7
   3e66c:	26 c0       	rjmp	.+76     	; 0x3e6ba <main+0xca>
   3e66e:	01 15       	cp	r16, r1
   3e670:	11 05       	cpc	r17, r1
   3e672:	19 f5       	brne	.+70     	; 0x3e6ba <main+0xca>
   3e674:	25 e0       	ldi	r18, 0x05	; 5
   3e676:	2a 95       	dec	r18
   3e678:	f1 f7       	brne	.-4      	; 0x3e676 <main+0x86>
   3e67a:	00 00       	nop
		{
			_delay_ms(0.001);
			boot_timer++;
   3e67c:	3f ef       	ldi	r19, 0xFF	; 255
   3e67e:	c3 1a       	sub	r12, r19
   3e680:	d3 0a       	sbc	r13, r19
   3e682:	e3 0a       	sbc	r14, r19
   3e684:	f3 0a       	sbc	r15, r19
			if (boot_timer > boot_timeout)
			{
				boot_state	=	1; // (after ++ -> boot_state=2 bootloader timeout, jump to main 0x00000 )
   3e686:	91 e0       	ldi	r25, 0x01	; 1
   3e688:	80 e0       	ldi	r24, 0x00	; 0
   3e68a:	41 e2       	ldi	r20, 0x21	; 33
   3e68c:	c4 16       	cp	r12, r20
   3e68e:	4e e4       	ldi	r20, 0x4E	; 78
   3e690:	d4 06       	cpc	r13, r20
   3e692:	e1 04       	cpc	r14, r1
   3e694:	f1 04       	cpc	r15, r1
   3e696:	08 f4       	brcc	.+2      	; 0x3e69a <main+0xaa>
   3e698:	90 e0       	ldi	r25, 0x00	; 0
   3e69a:	09 2f       	mov	r16, r25
   3e69c:	18 2f       	mov	r17, r24
			}
		#ifdef BLINK_LED_WHILE_WAITING
			if ((boot_timer % _BLINK_LOOP_COUNT_) == 0)
   3e69e:	c7 01       	movw	r24, r14
   3e6a0:	b6 01       	movw	r22, r12
   3e6a2:	a5 01       	movw	r20, r10
   3e6a4:	94 01       	movw	r18, r8
   3e6a6:	0f 94 78 fb 	call	0x3f6f0	; 0x3f6f0 <__udivmodsi4>
   3e6aa:	67 2b       	or	r22, r23
   3e6ac:	68 2b       	or	r22, r24
   3e6ae:	69 2b       	or	r22, r25
   3e6b0:	d1 f6       	brne	.-76     	; 0x3e666 <main+0x76>
			{
				//*	toggle the LED
				PROGLED_PORT	^=	(1<<PROGLED_PIN);	// turn LED ON
   3e6b2:	85 b1       	in	r24, 0x05	; 5
   3e6b4:	80 58       	subi	r24, 0x80	; 128
   3e6b6:	85 b9       	out	0x05, r24	; 5
   3e6b8:	d6 cf       	rjmp	.-84     	; 0x3e666 <main+0x76>
			}
		#endif
		}
		boot_state++; // ( if boot_state=1 bootloader received byte from UART, enter bootloader mode)
   3e6ba:	0f 5f       	subi	r16, 0xFF	; 255
   3e6bc:	1f 4f       	sbci	r17, 0xFF	; 255
	}


	if (boot_state==1)
   3e6be:	01 30       	cpi	r16, 0x01	; 1
   3e6c0:	11 05       	cpc	r17, r1
   3e6c2:	11 f0       	breq	.+4      	; 0x3e6c8 <main+0xd8>
   3e6c4:	0d 94 3a fb 	jmp	0x3f674	; 0x3f674 <main+0x1084>
   3e6c8:	c7 5d       	subi	r28, 0xD7	; 215
   3e6ca:	de 4f       	sbci	r29, 0xFE	; 254
   3e6cc:	19 82       	std	Y+1, r1	; 0x01
   3e6ce:	18 82       	st	Y, r1
   3e6d0:	c9 52       	subi	r28, 0x29	; 41
   3e6d2:	d1 40       	sbci	r29, 0x01	; 1
   3e6d4:	e1 2c       	mov	r14, r1
   3e6d6:	f1 2c       	mov	r15, r1
   3e6d8:	ca 5d       	subi	r28, 0xDA	; 218
   3e6da:	de 4f       	sbci	r29, 0xFE	; 254
   3e6dc:	18 82       	st	Y, r1
   3e6de:	c6 52       	subi	r28, 0x26	; 38
   3e6e0:	d1 40       	sbci	r29, 0x01	; 1
   3e6e2:	71 2c       	mov	r7, r1
   3e6e4:	c9 5d       	subi	r28, 0xD9	; 217
   3e6e6:	de 4f       	sbci	r29, 0xFE	; 254
   3e6e8:	19 82       	std	Y+1, r1	; 0x01
   3e6ea:	18 82       	st	Y, r1
   3e6ec:	c7 52       	subi	r28, 0x27	; 39
   3e6ee:	d1 40       	sbci	r29, 0x01	; 1
   3e6f0:	ce 5d       	subi	r28, 0xDE	; 222
   3e6f2:	de 4f       	sbci	r29, 0xFE	; 254
   3e6f4:	18 82       	st	Y, r1
   3e6f6:	19 82       	std	Y+1, r1	; 0x01
   3e6f8:	1a 82       	std	Y+2, r1	; 0x02
   3e6fa:	1b 82       	std	Y+3, r1	; 0x03
   3e6fc:	c2 52       	subi	r28, 0x22	; 34
   3e6fe:	d1 40       	sbci	r29, 0x01	; 1
   3e700:	81 2c       	mov	r8, r1
   3e702:	91 2c       	mov	r9, r1
   3e704:	54 01       	movw	r10, r8
	UART_STATUS_REG		|=	(1 <<UART_DOUBLE_SPEED);
#endif
	UART_BAUD_RATE_LOW	=	UART_BAUD_SELECT(BAUDRATE,F_CPU);
	UART_CONTROL_REG	=	(1 << UART_ENABLE_RECEIVER) | (1 << UART_ENABLE_TRANSMITTER);

	asm volatile ("nop");			// wait until port has changed
   3e706:	20 e0       	ldi	r18, 0x00	; 0
   3e708:	30 e0       	ldi	r19, 0x00	; 0
   3e70a:	80 e0       	ldi	r24, 0x00	; 0
			 * Collect received bytes to a complete message
			 */
			msgParseState	=	ST_START;
			while ( msgParseState != ST_PROCESS )
			{
				if (boot_state==1)
   3e70c:	01 30       	cpi	r16, 0x01	; 1
   3e70e:	11 05       	cpc	r17, r1
   3e710:	c1 f0       	breq	.+48     	; 0x3e742 <main+0x152>
	UART_STATUS_REG		|=	(1 <<UART_DOUBLE_SPEED);
#endif
	UART_BAUD_RATE_LOW	=	UART_BAUD_SELECT(BAUDRATE,F_CPU);
	UART_CONTROL_REG	=	(1 << UART_ENABLE_RECEIVER) | (1 << UART_ENABLE_TRANSMITTER);

	asm volatile ("nop");			// wait until port has changed
   3e712:	41 e0       	ldi	r20, 0x01	; 1
   3e714:	52 e1       	ldi	r21, 0x12	; 18
   3e716:	6a e7       	ldi	r22, 0x7A	; 122
   3e718:	70 e0       	ldi	r23, 0x00	; 0
//*****************************************************************************
static unsigned char recchar_timeout(void)
{
uint32_t count = 0;

	while (!(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE)))
   3e71a:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
   3e71e:	97 fd       	sbrc	r25, 7
   3e720:	10 c0       	rjmp	.+32     	; 0x3e742 <main+0x152>
   3e722:	41 50       	subi	r20, 0x01	; 1
   3e724:	51 09       	sbc	r21, r1
   3e726:	61 09       	sbc	r22, r1
   3e728:	71 09       	sbc	r23, r1
	{
		// wait for data
		count++;
		if (count > MAX_TIME_COUNT)
   3e72a:	b9 f7       	brne	.-18     	; 0x3e71a <main+0x12a>
		{
		unsigned int	data;
		#if (FLASHEND > 0x10000)
			data	=	pgm_read_word_far(0);	//*	get the first word of the user program
   3e72c:	6b bf       	out	0x3b, r22	; 59
   3e72e:	fa 01       	movw	r30, r20
   3e730:	47 91       	elpm	r20, Z+
   3e732:	56 91       	elpm	r21, Z
		#else
			data	=	pgm_read_word_near(0);	//*	get the first word of the user program
		#endif
			if (data != 0xffff)					//*	make sure its valid before jumping to it.
   3e734:	4f 3f       	cpi	r20, 0xFF	; 255
   3e736:	5f 4f       	sbci	r21, 0xFF	; 255
   3e738:	61 f3       	breq	.-40     	; 0x3e712 <main+0x122>
			{
				asm volatile(
   3e73a:	ee 27       	eor	r30, r30
   3e73c:	ff 27       	eor	r31, r31
   3e73e:	09 94       	ijmp
   3e740:	e8 cf       	rjmp	.-48     	; 0x3e712 <main+0x122>
						);
			}
			count	=	0;
		}
	}
	return UART_DATA_REG;
   3e742:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
					c	=	recchar_timeout();
					
				}

			#ifdef ENABLE_MONITOR
				rcvdCharCntr++;
   3e746:	c7 5d       	subi	r28, 0xD7	; 215
   3e748:	de 4f       	sbci	r29, 0xFE	; 254
   3e74a:	a8 81       	ld	r26, Y
   3e74c:	b9 81       	ldd	r27, Y+1	; 0x01
   3e74e:	c9 52       	subi	r28, 0x29	; 41
   3e750:	d1 40       	sbci	r29, 0x01	; 1
   3e752:	11 96       	adiw	r26, 0x01	; 1
   3e754:	c7 5d       	subi	r28, 0xD7	; 215
   3e756:	de 4f       	sbci	r29, 0xFE	; 254
   3e758:	b9 83       	std	Y+1, r27	; 0x01
   3e75a:	a8 83       	st	Y, r26
   3e75c:	c9 52       	subi	r28, 0x29	; 41
   3e75e:	d1 40       	sbci	r29, 0x01	; 1

				if ((c == '!')  && (rcvdCharCntr < 10))
   3e760:	91 32       	cpi	r25, 0x21	; 33
   3e762:	09 f0       	breq	.+2      	; 0x3e766 <main+0x176>
   3e764:	08 c5       	rjmp	.+2576   	; 0x3f176 <main+0xb86>
   3e766:	1a 97       	sbiw	r26, 0x0a	; 10
   3e768:	08 f0       	brcs	.+2      	; 0x3e76c <main+0x17c>
   3e76a:	67 c5       	rjmp	.+2766   	; 0x3f23a <main+0xc4a>
				{
					exPointCntr++;
   3e76c:	bf ef       	ldi	r27, 0xFF	; 255
   3e76e:	eb 1a       	sub	r14, r27
   3e770:	fb 0a       	sbc	r15, r27
					if (exPointCntr == 3)
   3e772:	e3 e0       	ldi	r30, 0x03	; 3
   3e774:	ee 16       	cp	r14, r30
   3e776:	f1 04       	cpc	r15, r1
   3e778:	09 f0       	breq	.+2      	; 0x3e77c <main+0x18c>
   3e77a:	61 c5       	rjmp	.+2754   	; 0x3f23e <main+0xc4e>
   3e77c:	f5 e0       	ldi	r31, 0x05	; 5
   3e77e:	ef 2e       	mov	r14, r31
   3e780:	f1 2c       	mov	r15, r1
	UART_STATUS_REG		|=	(1 <<UART_DOUBLE_SPEED);
#endif
	UART_BAUD_RATE_LOW	=	UART_BAUD_SELECT(BAUDRATE,F_CPU);
	UART_CONTROL_REG	=	(1 << UART_ENABLE_RECEIVER) | (1 << UART_ENABLE_TRANSMITTER);

	asm volatile ("nop");			// wait until port has changed
   3e782:	09 e1       	ldi	r16, 0x19	; 25
   3e784:	10 e0       	ldi	r17, 0x00	; 0

	for (ii=0; ii<5; ii++)
	{
		for (jj=0; jj<25; jj++)
		{
			sendchar('!');
   3e786:	81 e2       	ldi	r24, 0x21	; 33
   3e788:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <sendchar>
   3e78c:	01 50       	subi	r16, 0x01	; 1
   3e78e:	11 09       	sbc	r17, r1
unsigned char	theChar;
int				ii, jj;

	for (ii=0; ii<5; ii++)
	{
		for (jj=0; jj<25; jj++)
   3e790:	d1 f7       	brne	.-12     	; 0x3e786 <main+0x196>
		{
			sendchar('!');
		}
		PrintNewLine();
   3e792:	0f 94 ec f1 	call	0x3e3d8	; 0x3e3d8 <PrintNewLine>
   3e796:	f1 e0       	ldi	r31, 0x01	; 1
   3e798:	ef 1a       	sub	r14, r31
   3e79a:	f1 08       	sbc	r15, r1
{
char			keepGoing;
unsigned char	theChar;
int				ii, jj;

	for (ii=0; ii<5; ii++)
   3e79c:	91 f7       	brne	.-28     	; 0x3e782 <main+0x192>
			sendchar('!');
		}
		PrintNewLine();
	}

	gRamIndex			=	0;
   3e79e:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <gRamIndex>
   3e7a2:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <gRamIndex+0x1>
   3e7a6:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <gRamIndex+0x2>
   3e7aa:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <gRamIndex+0x3>
	gFlashIndex			=	0;
   3e7ae:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <gFlashIndex>
   3e7b2:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <gFlashIndex+0x1>
   3e7b6:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <gFlashIndex+0x2>
   3e7ba:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <gFlashIndex+0x3>
	gEepromIndex		=	0;
   3e7be:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <gEepromIndex>
   3e7c2:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <gEepromIndex+0x1>
   3e7c6:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <gEepromIndex+0x2>
   3e7ca:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <gEepromIndex+0x3>

	PrintFromPROGMEMln_p(gTextMsg_Explorer, 0);
   3e7ce:	60 e0       	ldi	r22, 0x00	; 0
   3e7d0:	86 ee       	ldi	r24, 0xE6	; 230
   3e7d2:	92 ee       	ldi	r25, 0xE2	; 226
   3e7d4:	0f 94 f2 f1 	call	0x3e3e4	; 0x3e3e4 <PrintFromPROGMEMln_p>
				break;
		#endif

		#ifdef DDRF
			case 'F':
				DDRF	=	0xff;
   3e7d8:	1f ef       	ldi	r17, 0xFF	; 255
	PrintFromPROGMEMln_p(gTextMsg_Explorer, 0);

	keepGoing	=	1;
	while (keepGoing)
	{
		PrintFromPROGMEM_p(gTextMsg_Prompt, 0);
   3e7da:	60 e0       	ldi	r22, 0x00	; 0
   3e7dc:	8a ed       	ldi	r24, 0xDA	; 218
   3e7de:	92 ee       	ldi	r25, 0xE2	; 226
   3e7e0:	0f 94 cf f1 	call	0x3e39e	; 0x3e39e <PrintFromPROGMEM_p>
		theChar	=	recchar();
   3e7e4:	0f 94 4d f2 	call	0x3e49a	; 0x3e49a <recchar>
   3e7e8:	08 2f       	mov	r16, r24
		if (theChar >= 0x60)
   3e7ea:	80 36       	cpi	r24, 0x60	; 96
   3e7ec:	08 f0       	brcs	.+2      	; 0x3e7f0 <main+0x200>
		{
			theChar	=	theChar & 0x5F;
   3e7ee:	0f 75       	andi	r16, 0x5F	; 95
		}

		if (theChar >= 0x20)
   3e7f0:	00 32       	cpi	r16, 0x20	; 32
   3e7f2:	30 f0       	brcs	.+12     	; 0x3e800 <main+0x210>
		{
			sendchar(theChar);
   3e7f4:	80 2f       	mov	r24, r16
   3e7f6:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <sendchar>
			sendchar(0x20);
   3e7fa:	80 e2       	ldi	r24, 0x20	; 32
   3e7fc:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <sendchar>
		}

		switch(theChar)
   3e800:	06 34       	cpi	r16, 0x46	; 70
   3e802:	09 f4       	brne	.+2      	; 0x3e806 <main+0x216>
   3e804:	d7 c1       	rjmp	.+942    	; 0x3ebb4 <main+0x5c4>
   3e806:	08 f0       	brcs	.+2      	; 0x3e80a <main+0x21a>
   3e808:	9b c0       	rjmp	.+310    	; 0x3e940 <main+0x350>
   3e80a:	00 34       	cpi	r16, 0x40	; 64
   3e80c:	09 f4       	brne	.+2      	; 0x3e810 <main+0x220>
   3e80e:	0c c1       	rjmp	.+536    	; 0x3ea28 <main+0x438>
   3e810:	08 f0       	brcs	.+2      	; 0x3e814 <main+0x224>
   3e812:	8f c0       	rjmp	.+286    	; 0x3e932 <main+0x342>
   3e814:	00 33       	cpi	r16, 0x30	; 48
   3e816:	09 f4       	brne	.+2      	; 0x3e81a <main+0x22a>
   3e818:	f1 c0       	rjmp	.+482    	; 0x3e9fc <main+0x40c>
   3e81a:	0f 33       	cpi	r16, 0x3F	; 63
   3e81c:	09 f0       	breq	.+2      	; 0x3e820 <main+0x230>
   3e81e:	a5 c4       	rjmp	.+2378   	; 0x3f16a <main+0xb7a>
				gRamIndex		=	0;
				gEepromIndex	=	0;
				break;

			case '?':
				PrintFromPROGMEMln_p(gTextMsg_HELP_MSG_QM, 2);
   3e820:	62 e0       	ldi	r22, 0x02	; 2
   3e822:	8b e6       	ldi	r24, 0x6B	; 107
   3e824:	91 ee       	ldi	r25, 0xE1	; 225
   3e826:	0f 94 f2 f1 	call	0x3e3e4	; 0x3e3e4 <PrintFromPROGMEMln_p>
//************************************************************************
static void	PrintCPUstats(void)
{
unsigned char fuseByte;

	PrintFromPROGMEMln_p(gTextMsg_Explorer, 0);
   3e82a:	60 e0       	ldi	r22, 0x00	; 0
   3e82c:	86 ee       	ldi	r24, 0xE6	; 230
   3e82e:	92 ee       	ldi	r25, 0xE2	; 226
   3e830:	0f 94 f2 f1 	call	0x3e3e4	; 0x3e3e4 <PrintFromPROGMEMln_p>

	PrintFromPROGMEM_p(gTextMsg_COMPILED_ON, 0);
   3e834:	60 e0       	ldi	r22, 0x00	; 0
   3e836:	86 ec       	ldi	r24, 0xC6	; 198
   3e838:	92 ee       	ldi	r25, 0xE2	; 226
   3e83a:	0f 94 cf f1 	call	0x3e39e	; 0x3e39e <PrintFromPROGMEM_p>
	PrintFromPROGMEMln_p(gTextMsg_GCC_DATE_STR, 0);
   3e83e:	60 e0       	ldi	r22, 0x00	; 0
   3e840:	83 e3       	ldi	r24, 0x33	; 51
   3e842:	92 ee       	ldi	r25, 0xE2	; 226
   3e844:	0f 94 f2 f1 	call	0x3e3e4	; 0x3e3e4 <PrintFromPROGMEMln_p>

	PrintFromPROGMEM_p(gTextMsg_CPU_Type, 0);
   3e848:	60 e0       	ldi	r22, 0x00	; 0
   3e84a:	87 eb       	ldi	r24, 0xB7	; 183
   3e84c:	92 ee       	ldi	r25, 0xE2	; 226
   3e84e:	0f 94 cf f1 	call	0x3e39e	; 0x3e39e <PrintFromPROGMEM_p>
	PrintFromPROGMEMln_p(gTextMsg_CPU_Name, 0);
   3e852:	60 e0       	ldi	r22, 0x00	; 0
   3e854:	87 e0       	ldi	r24, 0x07	; 7
   3e856:	93 ee       	ldi	r25, 0xE3	; 227
   3e858:	0f 94 f2 f1 	call	0x3e3e4	; 0x3e3e4 <PrintFromPROGMEMln_p>

	PrintFromPROGMEM_p(gTextMsg_AVR_ARCH, 0);
   3e85c:	60 e0       	ldi	r22, 0x00	; 0
   3e85e:	88 ea       	ldi	r24, 0xA8	; 168
   3e860:	92 ee       	ldi	r25, 0xE2	; 226
   3e862:	0f 94 cf f1 	call	0x3e39e	; 0x3e39e <PrintFromPROGMEM_p>
	{
		theChar	=	0x30  + ((myNumber % 100) / 10 );
		sendchar(theChar );
	}
	theChar	=	0x30 + (myNumber % 10);
	sendchar(theChar );
   3e866:	86 e3       	ldi	r24, 0x36	; 54
   3e868:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <sendchar>
	PrintFromPROGMEM_p(gTextMsg_CPU_Type, 0);
	PrintFromPROGMEMln_p(gTextMsg_CPU_Name, 0);

	PrintFromPROGMEM_p(gTextMsg_AVR_ARCH, 0);
	PrintDecInt(__AVR_ARCH__, 1);
	PrintNewLine();
   3e86c:	0f 94 ec f1 	call	0x3e3d8	; 0x3e3d8 <PrintNewLine>

	PrintFromPROGMEM_p(gTextMsg_GCC_VERSION, 0);
   3e870:	60 e0       	ldi	r22, 0x00	; 0
   3e872:	8a e8       	ldi	r24, 0x8A	; 138
   3e874:	92 ee       	ldi	r25, 0xE2	; 226
   3e876:	0f 94 cf f1 	call	0x3e39e	; 0x3e39e <PrintFromPROGMEM_p>
	PrintFromPROGMEMln_p(gTextMsg_GCC_VERSION_STR, 0);
   3e87a:	60 e0       	ldi	r22, 0x00	; 0
   3e87c:	87 e2       	ldi	r24, 0x27	; 39
   3e87e:	92 ee       	ldi	r25, 0xE2	; 226
   3e880:	0f 94 f2 f1 	call	0x3e3e4	; 0x3e3e4 <PrintFromPROGMEMln_p>

	//*	these can be found in avr/version.h
	PrintFromPROGMEM_p(gTextMsg_AVR_LIBC, 0);
   3e884:	60 e0       	ldi	r22, 0x00	; 0
   3e886:	89 e9       	ldi	r24, 0x99	; 153
   3e888:	92 ee       	ldi	r25, 0xE2	; 226
   3e88a:	0f 94 cf f1 	call	0x3e39e	; 0x3e39e <PrintFromPROGMEM_p>
	PrintFromPROGMEMln_p(gTextMsg_AVR_LIBC_VER_STR, 0);
   3e88e:	60 e0       	ldi	r22, 0x00	; 0
   3e890:	8d e2       	ldi	r24, 0x2D	; 45
   3e892:	92 ee       	ldi	r25, 0xE2	; 226
   3e894:	0f 94 f2 f1 	call	0x3e3e4	; 0x3e3e4 <PrintFromPROGMEMln_p>

#if defined(SIGNATURE_0)
	PrintFromPROGMEM_p(gTextMsg_CPU_SIGNATURE, 0);
   3e898:	60 e0       	ldi	r22, 0x00	; 0
   3e89a:	8b e7       	ldi	r24, 0x7B	; 123
   3e89c:	92 ee       	ldi	r25, 0xE2	; 226
   3e89e:	0f 94 cf f1 	call	0x3e39e	; 0x3e39e <PrintFromPROGMEM_p>
	//*	these can be found in avr/iomxxx.h
	PrintHexByte(SIGNATURE_0);
   3e8a2:	8e e1       	ldi	r24, 0x1E	; 30
   3e8a4:	0f 94 02 f2 	call	0x3e404	; 0x3e404 <PrintHexByte>
	PrintHexByte(SIGNATURE_1);
   3e8a8:	88 e9       	ldi	r24, 0x98	; 152
   3e8aa:	0f 94 02 f2 	call	0x3e404	; 0x3e404 <PrintHexByte>
	PrintHexByte(SIGNATURE_2);
   3e8ae:	81 e0       	ldi	r24, 0x01	; 1
   3e8b0:	0f 94 02 f2 	call	0x3e404	; 0x3e404 <PrintHexByte>
	PrintNewLine();
   3e8b4:	0f 94 ec f1 	call	0x3e3d8	; 0x3e3d8 <PrintNewLine>
#endif


#if defined(GET_LOW_FUSE_BITS)
	//*	fuse settings
	PrintFromPROGMEM_p(gTextMsg_FUSE_BYTE_LOW, 0);
   3e8b8:	60 e0       	ldi	r22, 0x00	; 0
   3e8ba:	8c e6       	ldi	r24, 0x6C	; 108
   3e8bc:	92 ee       	ldi	r25, 0xE2	; 226
   3e8be:	0f 94 cf f1 	call	0x3e39e	; 0x3e39e <PrintFromPROGMEM_p>
	fuseByte	=	boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS);
   3e8c2:	29 e0       	ldi	r18, 0x09	; 9
   3e8c4:	e0 e0       	ldi	r30, 0x00	; 0
   3e8c6:	f0 e0       	ldi	r31, 0x00	; 0
   3e8c8:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3e8cc:	84 91       	lpm	r24, Z
	PrintHexByte(fuseByte);
   3e8ce:	0f 94 02 f2 	call	0x3e404	; 0x3e404 <PrintHexByte>
	PrintNewLine();
   3e8d2:	0f 94 ec f1 	call	0x3e3d8	; 0x3e3d8 <PrintNewLine>

	PrintFromPROGMEM_p(gTextMsg_FUSE_BYTE_HIGH, 0);
   3e8d6:	60 e0       	ldi	r22, 0x00	; 0
   3e8d8:	8d e5       	ldi	r24, 0x5D	; 93
   3e8da:	92 ee       	ldi	r25, 0xE2	; 226
   3e8dc:	0f 94 cf f1 	call	0x3e39e	; 0x3e39e <PrintFromPROGMEM_p>
	fuseByte	=	boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS);
   3e8e0:	29 e0       	ldi	r18, 0x09	; 9
   3e8e2:	e3 e0       	ldi	r30, 0x03	; 3
   3e8e4:	f0 e0       	ldi	r31, 0x00	; 0
   3e8e6:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3e8ea:	84 91       	lpm	r24, Z
	PrintHexByte(fuseByte);
   3e8ec:	0f 94 02 f2 	call	0x3e404	; 0x3e404 <PrintHexByte>
	PrintNewLine();
   3e8f0:	0f 94 ec f1 	call	0x3e3d8	; 0x3e3d8 <PrintNewLine>

	PrintFromPROGMEM_p(gTextMsg_FUSE_BYTE_EXT, 0);
   3e8f4:	60 e0       	ldi	r22, 0x00	; 0
   3e8f6:	8e e4       	ldi	r24, 0x4E	; 78
   3e8f8:	92 ee       	ldi	r25, 0xE2	; 226
   3e8fa:	0f 94 cf f1 	call	0x3e39e	; 0x3e39e <PrintFromPROGMEM_p>
	fuseByte	=	boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS);
   3e8fe:	e2 e0       	ldi	r30, 0x02	; 2
   3e900:	f0 e0       	ldi	r31, 0x00	; 0
   3e902:	39 e0       	ldi	r19, 0x09	; 9
   3e904:	30 93 57 00 	sts	0x0057, r19	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3e908:	84 91       	lpm	r24, Z
	PrintHexByte(fuseByte);
   3e90a:	0f 94 02 f2 	call	0x3e404	; 0x3e404 <PrintHexByte>
	PrintNewLine();
   3e90e:	0f 94 ec f1 	call	0x3e3d8	; 0x3e3d8 <PrintNewLine>

	PrintFromPROGMEM_p(gTextMsg_FUSE_BYTE_LOCK, 0);
   3e912:	60 e0       	ldi	r22, 0x00	; 0
   3e914:	8f e3       	ldi	r24, 0x3F	; 63
   3e916:	92 ee       	ldi	r25, 0xE2	; 226
   3e918:	0f 94 cf f1 	call	0x3e39e	; 0x3e39e <PrintFromPROGMEM_p>
	fuseByte	=	boot_lock_fuse_bits_get(GET_LOCK_BITS);
   3e91c:	e1 e0       	ldi	r30, 0x01	; 1
   3e91e:	f0 e0       	ldi	r31, 0x00	; 0
   3e920:	49 e0       	ldi	r20, 0x09	; 9
   3e922:	40 93 57 00 	sts	0x0057, r20	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3e926:	84 91       	lpm	r24, Z
	PrintHexByte(fuseByte);
   3e928:	0f 94 02 f2 	call	0x3e404	; 0x3e404 <PrintHexByte>
	PrintNewLine();
   3e92c:	0f 94 ec f1 	call	0x3e3d8	; 0x3e3d8 <PrintNewLine>
   3e930:	54 cf       	rjmp	.-344    	; 0x3e7da <main+0x1ea>
		{
			sendchar(theChar);
			sendchar(0x20);
		}

		switch(theChar)
   3e932:	02 34       	cpi	r16, 0x42	; 66
   3e934:	09 f4       	brne	.+2      	; 0x3e938 <main+0x348>
   3e936:	fa c0       	rjmp	.+500    	; 0x3eb2c <main+0x53c>
   3e938:	05 34       	cpi	r16, 0x45	; 69
   3e93a:	09 f4       	brne	.+2      	; 0x3e93e <main+0x34e>
   3e93c:	11 c1       	rjmp	.+546    	; 0x3eb60 <main+0x570>
   3e93e:	15 c4       	rjmp	.+2090   	; 0x3f16a <main+0xb7a>
   3e940:	01 35       	cpi	r16, 0x51	; 81
   3e942:	09 f4       	brne	.+2      	; 0x3e946 <main+0x356>
   3e944:	9b c1       	rjmp	.+822    	; 0x3ec7c <main+0x68c>
   3e946:	68 f5       	brcc	.+90     	; 0x3e9a2 <main+0x3b2>
   3e948:	08 34       	cpi	r16, 0x48	; 72
   3e94a:	09 f4       	brne	.+2      	; 0x3e94e <main+0x35e>
   3e94c:	57 c1       	rjmp	.+686    	; 0x3ebfc <main+0x60c>
   3e94e:	0c 34       	cpi	r16, 0x4C	; 76
   3e950:	09 f0       	breq	.+2      	; 0x3e954 <main+0x364>
   3e952:	0b c4       	rjmp	.+2070   	; 0x3f16a <main+0xb7a>
				PrintFromPROGMEMln_p(gTextMsg_HELP_MSG_H, 2);
				PrintHelp();
				break;

			case 'L':
				PrintFromPROGMEMln_p(gTextMsg_HELP_MSG_L, 2);
   3e954:	62 e0       	ldi	r22, 0x02	; 2
   3e956:	8e e1       	ldi	r24, 0x1E	; 30
   3e958:	91 ee       	ldi	r25, 0xE1	; 225
   3e95a:	0f 94 f2 f1 	call	0x3e3e4	; 0x3e3e4 <PrintFromPROGMEMln_p>
//************************************************************************
static void	ListAvailablePorts(void)
{

#ifdef DDRA
	PrintAvailablePort('A');
   3e95e:	81 e4       	ldi	r24, 0x41	; 65
   3e960:	0f 94 54 f2 	call	0x3e4a8	; 0x3e4a8 <PrintAvailablePort>
#endif

#ifdef DDRB
	PrintAvailablePort('B');
   3e964:	82 e4       	ldi	r24, 0x42	; 66
   3e966:	0f 94 54 f2 	call	0x3e4a8	; 0x3e4a8 <PrintAvailablePort>
#endif

#ifdef DDRC
	PrintAvailablePort('C');
   3e96a:	83 e4       	ldi	r24, 0x43	; 67
   3e96c:	0f 94 54 f2 	call	0x3e4a8	; 0x3e4a8 <PrintAvailablePort>
#endif

#ifdef DDRD
	PrintAvailablePort('D');
   3e970:	84 e4       	ldi	r24, 0x44	; 68
   3e972:	0f 94 54 f2 	call	0x3e4a8	; 0x3e4a8 <PrintAvailablePort>
#endif

#ifdef DDRE
	PrintAvailablePort('E');
   3e976:	85 e4       	ldi	r24, 0x45	; 69
   3e978:	0f 94 54 f2 	call	0x3e4a8	; 0x3e4a8 <PrintAvailablePort>
#endif

#ifdef DDRF
	PrintAvailablePort('F');
   3e97c:	86 e4       	ldi	r24, 0x46	; 70
   3e97e:	0f 94 54 f2 	call	0x3e4a8	; 0x3e4a8 <PrintAvailablePort>
#endif

#ifdef DDRG
	PrintAvailablePort('G');
   3e982:	87 e4       	ldi	r24, 0x47	; 71
   3e984:	0f 94 54 f2 	call	0x3e4a8	; 0x3e4a8 <PrintAvailablePort>
#endif

#ifdef DDRH
	PrintAvailablePort('H');
   3e988:	88 e4       	ldi	r24, 0x48	; 72
   3e98a:	0f 94 54 f2 	call	0x3e4a8	; 0x3e4a8 <PrintAvailablePort>
#ifdef DDRI
	PrintAvailablePort('I');
#endif

#ifdef DDRJ
	PrintAvailablePort('J');
   3e98e:	8a e4       	ldi	r24, 0x4A	; 74
   3e990:	0f 94 54 f2 	call	0x3e4a8	; 0x3e4a8 <PrintAvailablePort>
#endif

#ifdef DDRK
	PrintAvailablePort('K');
   3e994:	8b e4       	ldi	r24, 0x4B	; 75
   3e996:	0f 94 54 f2 	call	0x3e4a8	; 0x3e4a8 <PrintAvailablePort>
#endif

#ifdef DDRL
	PrintAvailablePort('L');
   3e99a:	8c e4       	ldi	r24, 0x4C	; 76
   3e99c:	0f 94 54 f2 	call	0x3e4a8	; 0x3e4a8 <PrintAvailablePort>
   3e9a0:	1c cf       	rjmp	.-456    	; 0x3e7da <main+0x1ea>
		{
			sendchar(theChar);
			sendchar(0x20);
		}

		switch(theChar)
   3e9a2:	06 35       	cpi	r16, 0x56	; 86
   3e9a4:	09 f4       	brne	.+2      	; 0x3e9a8 <main+0x3b8>
   3e9a6:	74 c1       	rjmp	.+744    	; 0x3ec90 <main+0x6a0>
   3e9a8:	09 35       	cpi	r16, 0x59	; 89
   3e9aa:	09 f4       	brne	.+2      	; 0x3e9ae <main+0x3be>
   3e9ac:	e4 c2       	rjmp	.+1480   	; 0x3ef76 <main+0x986>
   3e9ae:	02 35       	cpi	r16, 0x52	; 82
   3e9b0:	09 f0       	breq	.+2      	; 0x3e9b4 <main+0x3c4>
   3e9b2:	db c3       	rjmp	.+1974   	; 0x3f16a <main+0xb7a>
				PrintFromPROGMEMln_p(gTextMsg_HELP_MSG_Q, 2);
				keepGoing	=	false;
				break;

			case 'R':
				PrintFromPROGMEMln_p(gTextMsg_HELP_MSG_R, 2);
   3e9b4:	62 e0       	ldi	r22, 0x02	; 2
   3e9b6:	8c e0       	ldi	r24, 0x0C	; 12
   3e9b8:	91 ee       	ldi	r25, 0xE1	; 225
   3e9ba:	0f 94 f2 f1 	call	0x3e3e4	; 0x3e3e4 <PrintFromPROGMEMln_p>
				DumpHex(kDUMP_RAM, gRamIndex, 16);
   3e9be:	40 91 0e 02 	lds	r20, 0x020E	; 0x80020e <gRamIndex>
   3e9c2:	50 91 0f 02 	lds	r21, 0x020F	; 0x80020f <gRamIndex+0x1>
   3e9c6:	60 91 10 02 	lds	r22, 0x0210	; 0x800210 <gRamIndex+0x2>
   3e9ca:	70 91 11 02 	lds	r23, 0x0211	; 0x800211 <gRamIndex+0x3>
   3e9ce:	82 e0       	ldi	r24, 0x02	; 2
   3e9d0:	0f 94 61 f2 	call	0x3e4c2	; 0x3e4c2 <DumpHex.constprop.0>
				gRamIndex	+=	256;
   3e9d4:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <gRamIndex>
   3e9d8:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <gRamIndex+0x1>
   3e9dc:	a0 91 10 02 	lds	r26, 0x0210	; 0x800210 <gRamIndex+0x2>
   3e9e0:	b0 91 11 02 	lds	r27, 0x0211	; 0x800211 <gRamIndex+0x3>
   3e9e4:	9f 5f       	subi	r25, 0xFF	; 255
   3e9e6:	af 4f       	sbci	r26, 0xFF	; 255
   3e9e8:	bf 4f       	sbci	r27, 0xFF	; 255
   3e9ea:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <gRamIndex>
   3e9ee:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <gRamIndex+0x1>
   3e9f2:	a0 93 10 02 	sts	0x0210, r26	; 0x800210 <gRamIndex+0x2>
   3e9f6:	b0 93 11 02 	sts	0x0211, r27	; 0x800211 <gRamIndex+0x3>
   3e9fa:	ef ce       	rjmp	.-546    	; 0x3e7da <main+0x1ea>
		}

		switch(theChar)
		{
			case '0':
				PrintFromPROGMEMln_p(gTextMsg_HELP_MSG_0, 2);
   3e9fc:	62 e0       	ldi	r22, 0x02	; 2
   3e9fe:	87 e7       	ldi	r24, 0x77	; 119
   3ea00:	91 ee       	ldi	r25, 0xE1	; 225
   3ea02:	0f 94 f2 f1 	call	0x3e3e4	; 0x3e3e4 <PrintFromPROGMEMln_p>
				gFlashIndex		=	0;
   3ea06:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <gFlashIndex>
   3ea0a:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <gFlashIndex+0x1>
   3ea0e:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <gFlashIndex+0x2>
   3ea12:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <gFlashIndex+0x3>
				gRamIndex		=	0;
   3ea16:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <gRamIndex>
   3ea1a:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <gRamIndex+0x1>
   3ea1e:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <gRamIndex+0x2>
   3ea22:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <gRamIndex+0x3>
   3ea26:	79 c0       	rjmp	.+242    	; 0x3eb1a <main+0x52a>
				PrintFromPROGMEMln_p(gTextMsg_HELP_MSG_QM, 2);
				PrintCPUstats();
				break;

			case '@':
				PrintFromPROGMEMln_p(gTextMsg_HELP_MSG_AT, 2);
   3ea28:	62 e0       	ldi	r22, 0x02	; 2
   3ea2a:	8d e5       	ldi	r24, 0x5D	; 93
   3ea2c:	91 ee       	ldi	r25, 0xE1	; 225
   3ea2e:	0f 94 f2 f1 	call	0x3e3e4	; 0x3e3e4 <PrintFromPROGMEMln_p>
int		ii;
char	theChar;
char	theEEPROMchar;
int		errorCount;

	PrintFromPROGMEMln_p(gTextMsg_WriteToEEprom, 0);
   3ea32:	60 e0       	ldi	r22, 0x00	; 0
   3ea34:	8f e9       	ldi	r24, 0x9F	; 159
   3ea36:	91 ee       	ldi	r25, 0xE1	; 225
   3ea38:	0f 94 f2 f1 	call	0x3e3e4	; 0x3e3e4 <PrintFromPROGMEMln_p>
	PrintNewLine();
   3ea3c:	0f 94 ec f1 	call	0x3e3d8	; 0x3e3d8 <PrintNewLine>
	ii			=	0;
   3ea40:	e1 2c       	mov	r14, r1
   3ea42:	f1 2c       	mov	r15, r1
#if (FLASHEND > 0x10000)
	while (((theChar = pgm_read_byte_far(gTextMsg_Explorer + ii)) != '*') && (ii < 512))
   3ea44:	c7 01       	movw	r24, r14
   3ea46:	8a 51       	subi	r24, 0x1A	; 26
   3ea48:	9d 41       	sbci	r25, 0x1D	; 29
   3ea4a:	09 2e       	mov	r0, r25
   3ea4c:	00 0c       	add	r0, r0
   3ea4e:	aa 0b       	sbc	r26, r26
   3ea50:	bb 0b       	sbc	r27, r27
   3ea52:	ab bf       	out	0x3b, r26	; 59
   3ea54:	fc 01       	movw	r30, r24
   3ea56:	07 91       	elpm	r16, Z+
   3ea58:	0a 32       	cpi	r16, 0x2A	; 42
   3ea5a:	b9 f0       	breq	.+46     	; 0x3ea8a <main+0x49a>
   3ea5c:	e1 14       	cp	r14, r1
   3ea5e:	62 e0       	ldi	r22, 0x02	; 2
   3ea60:	f6 06       	cpc	r15, r22
   3ea62:	99 f0       	breq	.+38     	; 0x3ea8a <main+0x49a>
#else
	while (((theChar = pgm_read_byte_near(gTextMsg_Explorer + ii)) != '*') && (ii < 512))
#endif
	{
		eeprom_write_byte((uint8_t *)ii, theChar);
   3ea64:	60 2f       	mov	r22, r16
   3ea66:	c7 01       	movw	r24, r14
   3ea68:	0f 94 bd fb 	call	0x3f77a	; 0x3f77a <eeprom_write_byte>
		if (theChar == 0)
   3ea6c:	01 11       	cpse	r16, r1
   3ea6e:	06 c0       	rjmp	.+12     	; 0x3ea7c <main+0x48c>
		{
			PrintFromPROGMEM_p(gTextMsg_SPACE, 0);
   3ea70:	60 e0       	ldi	r22, 0x00	; 0
   3ea72:	8b ea       	ldi	r24, 0xAB	; 171
   3ea74:	91 ee       	ldi	r25, 0xE1	; 225
   3ea76:	0f 94 cf f1 	call	0x3e39e	; 0x3e39e <PrintFromPROGMEM_p>
   3ea7a:	03 c0       	rjmp	.+6      	; 0x3ea82 <main+0x492>
		}
		else
		{
			sendchar(theChar);
   3ea7c:	80 2f       	mov	r24, r16
   3ea7e:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <sendchar>
		}
		ii++;
   3ea82:	5f ef       	ldi	r21, 0xFF	; 255
   3ea84:	e5 1a       	sub	r14, r21
   3ea86:	f5 0a       	sbc	r15, r21
   3ea88:	dd cf       	rjmp	.-70     	; 0x3ea44 <main+0x454>
	}

	//*	no go back through and test
	PrintNewLine();
   3ea8a:	0f 94 ec f1 	call	0x3e3d8	; 0x3e3d8 <PrintNewLine>
	PrintNewLine();
   3ea8e:	0f 94 ec f1 	call	0x3e3d8	; 0x3e3d8 <PrintNewLine>
	PrintFromPROGMEMln_p(gTextMsg_ReadingEEprom, 0);
   3ea92:	60 e0       	ldi	r22, 0x00	; 0
   3ea94:	84 e9       	ldi	r24, 0x94	; 148
   3ea96:	91 ee       	ldi	r25, 0xE1	; 225
   3ea98:	0f 94 f2 f1 	call	0x3e3e4	; 0x3e3e4 <PrintFromPROGMEMln_p>
	PrintNewLine();
   3ea9c:	0f 94 ec f1 	call	0x3e3d8	; 0x3e3d8 <PrintNewLine>
	errorCount	=	0;
   3eaa0:	c1 2c       	mov	r12, r1
   3eaa2:	d1 2c       	mov	r13, r1
	ii			=	0;
   3eaa4:	e1 2c       	mov	r14, r1
   3eaa6:	f1 2c       	mov	r15, r1
#if (FLASHEND > 0x10000)
	while (((theChar = pgm_read_byte_far(gTextMsg_Explorer + ii)) != '*') && (ii < 512))
   3eaa8:	c7 01       	movw	r24, r14
   3eaaa:	8a 51       	subi	r24, 0x1A	; 26
   3eaac:	9d 41       	sbci	r25, 0x1D	; 29
   3eaae:	09 2e       	mov	r0, r25
   3eab0:	00 0c       	add	r0, r0
   3eab2:	aa 0b       	sbc	r26, r26
   3eab4:	bb 0b       	sbc	r27, r27
   3eab6:	ab bf       	out	0x3b, r26	; 59
   3eab8:	fc 01       	movw	r30, r24
   3eaba:	07 91       	elpm	r16, Z+
   3eabc:	0a 32       	cpi	r16, 0x2A	; 42
   3eabe:	d9 f0       	breq	.+54     	; 0x3eaf6 <main+0x506>
   3eac0:	e1 14       	cp	r14, r1
   3eac2:	92 e0       	ldi	r25, 0x02	; 2
   3eac4:	f9 06       	cpc	r15, r25
   3eac6:	b9 f0       	breq	.+46     	; 0x3eaf6 <main+0x506>
#else
	while (((theChar = pgm_read_byte_near(gTextMsg_Explorer + ii)) != '*') && (ii < 512))
#endif
	{
		theEEPROMchar	=	eeprom_read_byte((uint8_t *)ii);
   3eac8:	c7 01       	movw	r24, r14
   3eaca:	0f 94 b5 fb 	call	0x3f76a	; 0x3f76a <eeprom_read_byte>
   3eace:	78 2e       	mov	r7, r24
		if (theEEPROMchar == 0)
   3ead0:	81 11       	cpse	r24, r1
   3ead2:	06 c0       	rjmp	.+12     	; 0x3eae0 <main+0x4f0>
		{
			PrintFromPROGMEM_p(gTextMsg_SPACE, 0);
   3ead4:	60 e0       	ldi	r22, 0x00	; 0
   3ead6:	8b ea       	ldi	r24, 0xAB	; 171
   3ead8:	91 ee       	ldi	r25, 0xE1	; 225
   3eada:	0f 94 cf f1 	call	0x3e39e	; 0x3e39e <PrintFromPROGMEM_p>
   3eade:	02 c0       	rjmp	.+4      	; 0x3eae4 <main+0x4f4>
		}
		else
		{
			sendchar(theEEPROMchar);
   3eae0:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <sendchar>
		}
		if (theEEPROMchar != theChar)
   3eae4:	70 16       	cp	r7, r16
   3eae6:	19 f0       	breq	.+6      	; 0x3eaee <main+0x4fe>
		{
			errorCount++;
   3eae8:	7f ef       	ldi	r23, 0xFF	; 255
   3eaea:	c7 1a       	sub	r12, r23
   3eaec:	d7 0a       	sbc	r13, r23
		}
		ii++;
   3eaee:	8f ef       	ldi	r24, 0xFF	; 255
   3eaf0:	e8 1a       	sub	r14, r24
   3eaf2:	f8 0a       	sbc	r15, r24
   3eaf4:	d9 cf       	rjmp	.-78     	; 0x3eaa8 <main+0x4b8>
	}
	PrintNewLine();
   3eaf6:	0f 94 ec f1 	call	0x3e3d8	; 0x3e3d8 <PrintNewLine>
	PrintNewLine();
   3eafa:	0f 94 ec f1 	call	0x3e3d8	; 0x3e3d8 <PrintNewLine>
	PrintFromPROGMEM_p(gTextMsg_EEPROMerrorCnt, 0);
   3eafe:	60 e0       	ldi	r22, 0x00	; 0
   3eb00:	88 e8       	ldi	r24, 0x88	; 136
   3eb02:	91 ee       	ldi	r25, 0xE1	; 225
   3eb04:	0f 94 cf f1 	call	0x3e39e	; 0x3e39e <PrintFromPROGMEM_p>
	PrintDecInt(errorCount, 1);
   3eb08:	61 e0       	ldi	r22, 0x01	; 1
   3eb0a:	70 e0       	ldi	r23, 0x00	; 0
   3eb0c:	c6 01       	movw	r24, r12
   3eb0e:	0f 94 19 f2 	call	0x3e432	; 0x3e432 <PrintDecInt>
	PrintNewLine();
   3eb12:	0f 94 ec f1 	call	0x3e3d8	; 0x3e3d8 <PrintNewLine>
	PrintNewLine();
   3eb16:	0f 94 ec f1 	call	0x3e3d8	; 0x3e3d8 <PrintNewLine>

	gEepromIndex	=	0;	//*	set index back to zero for next eeprom dump
   3eb1a:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <gEepromIndex>
   3eb1e:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <gEepromIndex+0x1>
   3eb22:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <gEepromIndex+0x2>
   3eb26:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <gEepromIndex+0x3>
   3eb2a:	57 ce       	rjmp	.-850    	; 0x3e7da <main+0x1ea>
				PrintFromPROGMEMln_p(gTextMsg_HELP_MSG_AT, 2);
				EEPROMtest();
				break;

			case 'B':
				PrintFromPROGMEMln_p(gTextMsg_HELP_MSG_B, 2);
   3eb2c:	62 e0       	ldi	r22, 0x02	; 2
   3eb2e:	81 e5       	ldi	r24, 0x51	; 81
   3eb30:	91 ee       	ldi	r25, 0xE1	; 225
   3eb32:	0f 94 f2 f1 	call	0x3e3e4	; 0x3e3e4 <PrintFromPROGMEMln_p>


//************************************************************************
static void BlinkLED(void)
{
	PROGLED_DDR		|=	(1<<PROGLED_PIN);
   3eb36:	27 9a       	sbi	0x04, 7	; 4
	PROGLED_PORT	|=	(1<<PROGLED_PIN);	// active high LED ON
   3eb38:	2f 9a       	sbi	0x05, 7	; 5


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   3eb3a:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
static void BlinkLED(void)
{
	PROGLED_DDR		|=	(1<<PROGLED_PIN);
	PROGLED_PORT	|=	(1<<PROGLED_PIN);	// active high LED ON

	while (!Serial_Available())
   3eb3e:	87 fd       	sbrc	r24, 7
   3eb40:	0c c0       	rjmp	.+24     	; 0x3eb5a <main+0x56a>
	{
		PROGLED_PORT	&=	~(1<<PROGLED_PIN);	// turn LED off
   3eb42:	2f 98       	cbi	0x05, 7	; 5
		delay_ms(100);
   3eb44:	84 e6       	ldi	r24, 0x64	; 100
   3eb46:	90 e0       	ldi	r25, 0x00	; 0
   3eb48:	0f 94 c0 f1 	call	0x3e380	; 0x3e380 <delay_ms>
		PROGLED_PORT	|=	(1<<PROGLED_PIN);	// turn LED on
   3eb4c:	2f 9a       	sbi	0x05, 7	; 5
		delay_ms(100);
   3eb4e:	84 e6       	ldi	r24, 0x64	; 100
   3eb50:	90 e0       	ldi	r25, 0x00	; 0
   3eb52:	0f 94 c0 f1 	call	0x3e380	; 0x3e380 <delay_ms>
   3eb56:	f1 cf       	rjmp	.-30     	; 0x3eb3a <main+0x54a>
				while (!Serial_Available())
				{
					PORTA	^=	0xff;
					delay_ms(200);
				}
				PORTA	=	0;
   3eb58:	12 b8       	out	0x02, r1	; 2
		PROGLED_PORT	&=	~(1<<PROGLED_PIN);	// turn LED off
		delay_ms(100);
		PROGLED_PORT	|=	(1<<PROGLED_PIN);	// turn LED on
		delay_ms(100);
	}
	recchar();	//	get the char out of the buffer
   3eb5a:	0f 94 4d f2 	call	0x3e49a	; 0x3e49a <recchar>
   3eb5e:	3d ce       	rjmp	.-902    	; 0x3e7da <main+0x1ea>
				PrintFromPROGMEMln_p(gTextMsg_HELP_MSG_B, 2);
				BlinkLED();
				break;

			case 'E':
				PrintFromPROGMEMln_p(gTextMsg_HELP_MSG_E, 2);
   3eb60:	62 e0       	ldi	r22, 0x02	; 2
   3eb62:	83 e4       	ldi	r24, 0x43	; 67
   3eb64:	91 ee       	ldi	r25, 0xE1	; 225
   3eb66:	0f 94 f2 f1 	call	0x3e3e4	; 0x3e3e4 <PrintFromPROGMEMln_p>
				DumpHex(kDUMP_EEPROM, gEepromIndex, 16);
   3eb6a:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <gEepromIndex>
   3eb6e:	50 91 07 02 	lds	r21, 0x0207	; 0x800207 <gEepromIndex+0x1>
   3eb72:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <gEepromIndex+0x2>
   3eb76:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <gEepromIndex+0x3>
   3eb7a:	81 e0       	ldi	r24, 0x01	; 1
   3eb7c:	0f 94 61 f2 	call	0x3e4c2	; 0x3e4c2 <DumpHex.constprop.0>
				gEepromIndex	+=	256;
   3eb80:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <gEepromIndex>
   3eb84:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <gEepromIndex+0x1>
   3eb88:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <gEepromIndex+0x2>
   3eb8c:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <gEepromIndex+0x3>
   3eb90:	9f 5f       	subi	r25, 0xFF	; 255
   3eb92:	af 4f       	sbci	r26, 0xFF	; 255
   3eb94:	bf 4f       	sbci	r27, 0xFF	; 255
   3eb96:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <gEepromIndex>
   3eb9a:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <gEepromIndex+0x1>
   3eb9e:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <gEepromIndex+0x2>
   3eba2:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <gEepromIndex+0x3>
				if (gEepromIndex > E2END)
   3eba6:	81 15       	cp	r24, r1
   3eba8:	90 41       	sbci	r25, 0x10	; 16
   3ebaa:	a1 05       	cpc	r26, r1
   3ebac:	b1 05       	cpc	r27, r1
   3ebae:	08 f4       	brcc	.+2      	; 0x3ebb2 <main+0x5c2>
   3ebb0:	14 ce       	rjmp	.-984    	; 0x3e7da <main+0x1ea>
   3ebb2:	b3 cf       	rjmp	.-154    	; 0x3eb1a <main+0x52a>
					gEepromIndex	=	0;
				}
				break;
		
			case 'F':
				PrintFromPROGMEMln_p(gTextMsg_HELP_MSG_F, 2);
   3ebb4:	62 e0       	ldi	r22, 0x02	; 2
   3ebb6:	86 e3       	ldi	r24, 0x36	; 54
   3ebb8:	91 ee       	ldi	r25, 0xE1	; 225
   3ebba:	0f 94 f2 f1 	call	0x3e3e4	; 0x3e3e4 <PrintFromPROGMEMln_p>
				DumpHex(kDUMP_FLASH, gFlashIndex, 16);
   3ebbe:	40 91 0a 02 	lds	r20, 0x020A	; 0x80020a <gFlashIndex>
   3ebc2:	50 91 0b 02 	lds	r21, 0x020B	; 0x80020b <gFlashIndex+0x1>
   3ebc6:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <gFlashIndex+0x2>
   3ebca:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <gFlashIndex+0x3>
   3ebce:	80 e0       	ldi	r24, 0x00	; 0
   3ebd0:	0f 94 61 f2 	call	0x3e4c2	; 0x3e4c2 <DumpHex.constprop.0>
				gFlashIndex	+=	256;
   3ebd4:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <gFlashIndex>
   3ebd8:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <gFlashIndex+0x1>
   3ebdc:	a0 91 0c 02 	lds	r26, 0x020C	; 0x80020c <gFlashIndex+0x2>
   3ebe0:	b0 91 0d 02 	lds	r27, 0x020D	; 0x80020d <gFlashIndex+0x3>
   3ebe4:	9f 5f       	subi	r25, 0xFF	; 255
   3ebe6:	af 4f       	sbci	r26, 0xFF	; 255
   3ebe8:	bf 4f       	sbci	r27, 0xFF	; 255
   3ebea:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <gFlashIndex>
   3ebee:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <gFlashIndex+0x1>
   3ebf2:	a0 93 0c 02 	sts	0x020C, r26	; 0x80020c <gFlashIndex+0x2>
   3ebf6:	b0 93 0d 02 	sts	0x020D, r27	; 0x80020d <gFlashIndex+0x3>
   3ebfa:	ef cd       	rjmp	.-1058   	; 0x3e7da <main+0x1ea>
				break;

			case 'H':
				PrintFromPROGMEMln_p(gTextMsg_HELP_MSG_H, 2);
   3ebfc:	62 e0       	ldi	r22, 0x02	; 2
   3ebfe:	8f e2       	ldi	r24, 0x2F	; 47
   3ec00:	91 ee       	ldi	r25, 0xE1	; 225
   3ec02:	0f 94 f2 f1 	call	0x3e3e4	; 0x3e3e4 <PrintFromPROGMEMln_p>


//*******************************************************************
static void PrintHelp(void)
{
	PrintFromPROGMEMln_p(gTextMsg_HELP_MSG_0, 0);
   3ec06:	60 e0       	ldi	r22, 0x00	; 0
   3ec08:	87 e7       	ldi	r24, 0x77	; 119
   3ec0a:	91 ee       	ldi	r25, 0xE1	; 225
   3ec0c:	0f 94 f2 f1 	call	0x3e3e4	; 0x3e3e4 <PrintFromPROGMEMln_p>
	PrintFromPROGMEMln_p(gTextMsg_HELP_MSG_QM, 0);
   3ec10:	60 e0       	ldi	r22, 0x00	; 0
   3ec12:	8b e6       	ldi	r24, 0x6B	; 107
   3ec14:	91 ee       	ldi	r25, 0xE1	; 225
   3ec16:	0f 94 f2 f1 	call	0x3e3e4	; 0x3e3e4 <PrintFromPROGMEMln_p>
	PrintFromPROGMEMln_p(gTextMsg_HELP_MSG_AT, 0);
   3ec1a:	60 e0       	ldi	r22, 0x00	; 0
   3ec1c:	8d e5       	ldi	r24, 0x5D	; 93
   3ec1e:	91 ee       	ldi	r25, 0xE1	; 225
   3ec20:	0f 94 f2 f1 	call	0x3e3e4	; 0x3e3e4 <PrintFromPROGMEMln_p>
	PrintFromPROGMEMln_p(gTextMsg_HELP_MSG_B, 0);
   3ec24:	60 e0       	ldi	r22, 0x00	; 0
   3ec26:	81 e5       	ldi	r24, 0x51	; 81
   3ec28:	91 ee       	ldi	r25, 0xE1	; 225
   3ec2a:	0f 94 f2 f1 	call	0x3e3e4	; 0x3e3e4 <PrintFromPROGMEMln_p>
	PrintFromPROGMEMln_p(gTextMsg_HELP_MSG_E, 0);
   3ec2e:	60 e0       	ldi	r22, 0x00	; 0
   3ec30:	83 e4       	ldi	r24, 0x43	; 67
   3ec32:	91 ee       	ldi	r25, 0xE1	; 225
   3ec34:	0f 94 f2 f1 	call	0x3e3e4	; 0x3e3e4 <PrintFromPROGMEMln_p>
	PrintFromPROGMEMln_p(gTextMsg_HELP_MSG_F, 0);
   3ec38:	60 e0       	ldi	r22, 0x00	; 0
   3ec3a:	86 e3       	ldi	r24, 0x36	; 54
   3ec3c:	91 ee       	ldi	r25, 0xE1	; 225
   3ec3e:	0f 94 f2 f1 	call	0x3e3e4	; 0x3e3e4 <PrintFromPROGMEMln_p>
	PrintFromPROGMEMln_p(gTextMsg_HELP_MSG_H, 0);
   3ec42:	60 e0       	ldi	r22, 0x00	; 0
   3ec44:	8f e2       	ldi	r24, 0x2F	; 47
   3ec46:	91 ee       	ldi	r25, 0xE1	; 225
   3ec48:	0f 94 f2 f1 	call	0x3e3e4	; 0x3e3e4 <PrintFromPROGMEMln_p>

	PrintFromPROGMEMln_p(gTextMsg_HELP_MSG_L, 0);
   3ec4c:	60 e0       	ldi	r22, 0x00	; 0
   3ec4e:	8e e1       	ldi	r24, 0x1E	; 30
   3ec50:	91 ee       	ldi	r25, 0xE1	; 225
   3ec52:	0f 94 f2 f1 	call	0x3e3e4	; 0x3e3e4 <PrintFromPROGMEMln_p>
	PrintFromPROGMEMln_p(gTextMsg_HELP_MSG_Q, 0);
   3ec56:	60 e0       	ldi	r22, 0x00	; 0
   3ec58:	87 e1       	ldi	r24, 0x17	; 23
   3ec5a:	91 ee       	ldi	r25, 0xE1	; 225
   3ec5c:	0f 94 f2 f1 	call	0x3e3e4	; 0x3e3e4 <PrintFromPROGMEMln_p>
	PrintFromPROGMEMln_p(gTextMsg_HELP_MSG_R, 0);
   3ec60:	60 e0       	ldi	r22, 0x00	; 0
   3ec62:	8c e0       	ldi	r24, 0x0C	; 12
   3ec64:	91 ee       	ldi	r25, 0xE1	; 225
   3ec66:	0f 94 f2 f1 	call	0x3e3e4	; 0x3e3e4 <PrintFromPROGMEMln_p>
	PrintFromPROGMEMln_p(gTextMsg_HELP_MSG_V, 0);
   3ec6a:	60 e0       	ldi	r22, 0x00	; 0
   3ec6c:	83 ef       	ldi	r24, 0xF3	; 243
   3ec6e:	90 ee       	ldi	r25, 0xE0	; 224
   3ec70:	0f 94 f2 f1 	call	0x3e3e4	; 0x3e3e4 <PrintFromPROGMEMln_p>
	PrintFromPROGMEMln_p(gTextMsg_HELP_MSG_Y, 0);
   3ec74:	60 e0       	ldi	r22, 0x00	; 0
   3ec76:	86 ee       	ldi	r24, 0xE6	; 230
   3ec78:	90 ee       	ldi	r25, 0xE0	; 224
   3ec7a:	7a c2       	rjmp	.+1268   	; 0x3f170 <main+0xb80>
				PrintFromPROGMEMln_p(gTextMsg_HELP_MSG_L, 2);
				ListAvailablePorts();
				break;

			case 'Q':
				PrintFromPROGMEMln_p(gTextMsg_HELP_MSG_Q, 2);
   3ec7c:	62 e0       	ldi	r22, 0x02	; 2
   3ec7e:	87 e1       	ldi	r24, 0x17	; 23
   3ec80:	91 ee       	ldi	r25, 0xE1	; 225
   3ec82:	0f 94 f2 f1 	call	0x3e3e4	; 0x3e3e4 <PrintFromPROGMEMln_p>
				{
					exPointCntr++;
					if (exPointCntr == 3)
					{
						RunMonitor();
						exPointCntr		=	0;	//	reset back to zero so we dont get in an endless loop
   3ec86:	e1 2c       	mov	r14, r1
   3ec88:	f1 2c       	mov	r15, r1
						isLeave			=	1;
   3ec8a:	66 24       	eor	r6, r6
   3ec8c:	63 94       	inc	r6
   3ec8e:	ea c2       	rjmp	.+1492   	; 0x3f264 <main+0xc74>
				DumpHex(kDUMP_RAM, gRamIndex, 16);
				gRamIndex	+=	256;
				break;

			case 'V':
				PrintFromPROGMEMln_p(gTextMsg_HELP_MSG_V, 2);
   3ec90:	62 e0       	ldi	r22, 0x02	; 2
   3ec92:	83 ef       	ldi	r24, 0xF3	; 243
   3ec94:	90 ee       	ldi	r25, 0xE0	; 224
   3ec96:	0f 94 f2 f1 	call	0x3e3e4	; 0x3e3e4 <PrintFromPROGMEMln_p>
	long		stringPointer;
#endif

	myMemoryPtr		=	0;
	vectorIndex		=	0;
	PrintFromPROGMEMln_p(gTextMsg_CPU_Name, 0);
   3ec9a:	60 e0       	ldi	r22, 0x00	; 0
   3ec9c:	87 e0       	ldi	r24, 0x07	; 7
   3ec9e:	93 ee       	ldi	r25, 0xE3	; 227
   3eca0:	0f 94 f2 f1 	call	0x3e3e4	; 0x3e3e4 <PrintFromPROGMEMln_p>
	PrintFromPROGMEMln_p(gTextMsg_VECTOR_HEADER, 0);
   3eca4:	60 e0       	ldi	r22, 0x00	; 0
   3eca6:	82 ef       	ldi	r24, 0xF2	; 242
   3eca8:	91 ee       	ldi	r25, 0xE1	; 225
   3ecaa:	0f 94 f2 f1 	call	0x3e3e4	; 0x3e3e4 <PrintFromPROGMEMln_p>
#if defined(_INTERRUPT_NAMES_DEFINED_)
	long		stringPointer;
#endif

	myMemoryPtr		=	0;
	vectorIndex		=	0;
   3ecae:	21 2c       	mov	r2, r1
   3ecb0:	31 2c       	mov	r3, r1
unsigned long	absoluteAddr;
#if defined(_INTERRUPT_NAMES_DEFINED_)
	long		stringPointer;
#endif

	myMemoryPtr		=	0;
   3ecb2:	c2 5e       	subi	r28, 0xE2	; 226
   3ecb4:	de 4f       	sbci	r29, 0xFE	; 254
   3ecb6:	18 82       	st	Y, r1
   3ecb8:	19 82       	std	Y+1, r1	; 0x01
   3ecba:	1a 82       	std	Y+2, r1	; 0x02
   3ecbc:	1b 82       	std	Y+3, r1	; 0x03
   3ecbe:	ce 51       	subi	r28, 0x1E	; 30
   3ecc0:	d1 40       	sbci	r29, 0x01	; 1
	PrintFromPROGMEMln_p(gTextMsg_VECTOR_HEADER, 0);
	//					 V#   ADDR   op code
	//					  1 - 0000 = C3 BB 00 00 rjmp 03BB >000776 RESET
	while (vectorIndex < kInterruptVectorCount)
	{
		wordMemoryAddress	=	myMemoryPtr / 2;
   3ecc2:	c2 5e       	subi	r28, 0xE2	; 226
   3ecc4:	de 4f       	sbci	r29, 0xFE	; 254
   3ecc6:	28 81       	ld	r18, Y
   3ecc8:	39 81       	ldd	r19, Y+1	; 0x01
   3ecca:	4a 81       	ldd	r20, Y+2	; 0x02
   3eccc:	5b 81       	ldd	r21, Y+3	; 0x03
   3ecce:	ce 51       	subi	r28, 0x1E	; 30
   3ecd0:	d1 40       	sbci	r29, 0x01	; 1
   3ecd2:	56 95       	lsr	r21
   3ecd4:	47 95       	ror	r20
   3ecd6:	37 95       	ror	r19
   3ecd8:	27 95       	ror	r18
   3ecda:	c5 5d       	subi	r28, 0xD5	; 213
   3ecdc:	de 4f       	sbci	r29, 0xFE	; 254
   3ecde:	28 83       	st	Y, r18
   3ece0:	39 83       	std	Y+1, r19	; 0x01
   3ece2:	4a 83       	std	Y+2, r20	; 0x02
   3ece4:	5b 83       	std	Y+3, r21	; 0x03
   3ece6:	cb 52       	subi	r28, 0x2B	; 43
   3ece8:	d1 40       	sbci	r29, 0x01	; 1
		//					 01 - 0000 = 12 34
		PrintDecInt(vectorIndex + 1, 2);
   3ecea:	3f ef       	ldi	r19, 0xFF	; 255
   3ecec:	23 1a       	sub	r2, r19
   3ecee:	33 0a       	sbc	r3, r19
   3ecf0:	62 e0       	ldi	r22, 0x02	; 2
   3ecf2:	70 e0       	ldi	r23, 0x00	; 0
   3ecf4:	c1 01       	movw	r24, r2
   3ecf6:	0f 94 19 f2 	call	0x3e432	; 0x3e432 <PrintDecInt>
		sendchar(0x20);
   3ecfa:	80 e2       	ldi	r24, 0x20	; 32
   3ecfc:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <sendchar>
		sendchar('-');
   3ed00:	8d e2       	ldi	r24, 0x2D	; 45
   3ed02:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <sendchar>
		sendchar(0x20);
   3ed06:	80 e2       	ldi	r24, 0x20	; 32
   3ed08:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <sendchar>
		PrintHexByte((wordMemoryAddress >> 8) & 0x00ff);
   3ed0c:	80 e0       	ldi	r24, 0x00	; 0
   3ed0e:	0f 94 02 f2 	call	0x3e404	; 0x3e404 <PrintHexByte>
		PrintHexByte((wordMemoryAddress) & 0x00ff);
   3ed12:	c5 5d       	subi	r28, 0xD5	; 213
   3ed14:	de 4f       	sbci	r29, 0xFE	; 254
   3ed16:	88 81       	ld	r24, Y
   3ed18:	cb 52       	subi	r28, 0x2B	; 43
   3ed1a:	d1 40       	sbci	r29, 0x01	; 1
   3ed1c:	0f 94 02 f2 	call	0x3e404	; 0x3e404 <PrintHexByte>
		sendchar(0x20);
   3ed20:	80 e2       	ldi	r24, 0x20	; 32
   3ed22:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <sendchar>
		sendchar('=');
   3ed26:	8d e3       	ldi	r24, 0x3D	; 61
   3ed28:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <sendchar>
		sendchar(0x20);
   3ed2c:	80 e2       	ldi	r24, 0x20	; 32
   3ed2e:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <sendchar>

	
		//*	the AVR is LITTLE ENDIAN, swap the byte order
	#if (FLASHEND > 0x10000)
		byte1	=	pgm_read_byte_far(myMemoryPtr++);
   3ed32:	c2 5e       	subi	r28, 0xE2	; 226
   3ed34:	de 4f       	sbci	r29, 0xFE	; 254
   3ed36:	48 81       	ld	r20, Y
   3ed38:	59 81       	ldd	r21, Y+1	; 0x01
   3ed3a:	6a 81       	ldd	r22, Y+2	; 0x02
   3ed3c:	7b 81       	ldd	r23, Y+3	; 0x03
   3ed3e:	ce 51       	subi	r28, 0x1E	; 30
   3ed40:	d1 40       	sbci	r29, 0x01	; 1
   3ed42:	6b bf       	out	0x3b, r22	; 59
   3ed44:	fa 01       	movw	r30, r20
   3ed46:	07 91       	elpm	r16, Z+
		byte2	=	pgm_read_byte_far(myMemoryPtr++);
   3ed48:	6a 01       	movw	r12, r20
   3ed4a:	7b 01       	movw	r14, r22
   3ed4c:	5f ef       	ldi	r21, 0xFF	; 255
   3ed4e:	c5 1a       	sub	r12, r21
   3ed50:	d5 0a       	sbc	r13, r21
   3ed52:	e5 0a       	sbc	r14, r21
   3ed54:	f5 0a       	sbc	r15, r21
   3ed56:	eb be       	out	0x3b, r14	; 59
   3ed58:	f6 01       	movw	r30, r12
   3ed5a:	e7 90       	elpm	r14, Z+
		byte3	=	pgm_read_byte_far(myMemoryPtr++);
   3ed5c:	c2 5e       	subi	r28, 0xE2	; 226
   3ed5e:	de 4f       	sbci	r29, 0xFE	; 254
   3ed60:	88 81       	ld	r24, Y
   3ed62:	99 81       	ldd	r25, Y+1	; 0x01
   3ed64:	aa 81       	ldd	r26, Y+2	; 0x02
   3ed66:	bb 81       	ldd	r27, Y+3	; 0x03
   3ed68:	ce 51       	subi	r28, 0x1E	; 30
   3ed6a:	d1 40       	sbci	r29, 0x01	; 1
   3ed6c:	02 96       	adiw	r24, 0x02	; 2
   3ed6e:	a1 1d       	adc	r26, r1
   3ed70:	b1 1d       	adc	r27, r1
   3ed72:	ab bf       	out	0x3b, r26	; 59
   3ed74:	fc 01       	movw	r30, r24
   3ed76:	d7 90       	elpm	r13, Z+
		byte4	=	pgm_read_byte_far(myMemoryPtr++);
   3ed78:	c2 5e       	subi	r28, 0xE2	; 226
   3ed7a:	de 4f       	sbci	r29, 0xFE	; 254
   3ed7c:	88 81       	ld	r24, Y
   3ed7e:	99 81       	ldd	r25, Y+1	; 0x01
   3ed80:	aa 81       	ldd	r26, Y+2	; 0x02
   3ed82:	bb 81       	ldd	r27, Y+3	; 0x03
   3ed84:	ce 51       	subi	r28, 0x1E	; 30
   3ed86:	d1 40       	sbci	r29, 0x01	; 1
   3ed88:	03 96       	adiw	r24, 0x03	; 3
   3ed8a:	a1 1d       	adc	r26, r1
   3ed8c:	b1 1d       	adc	r27, r1
   3ed8e:	ab bf       	out	0x3b, r26	; 59
   3ed90:	fc 01       	movw	r30, r24
   3ed92:	f7 90       	elpm	r15, Z+
   3ed94:	c2 5e       	subi	r28, 0xE2	; 226
   3ed96:	de 4f       	sbci	r29, 0xFE	; 254
   3ed98:	68 81       	ld	r22, Y
   3ed9a:	79 81       	ldd	r23, Y+1	; 0x01
   3ed9c:	8a 81       	ldd	r24, Y+2	; 0x02
   3ed9e:	9b 81       	ldd	r25, Y+3	; 0x03
   3eda0:	ce 51       	subi	r28, 0x1E	; 30
   3eda2:	d1 40       	sbci	r29, 0x01	; 1
   3eda4:	6c 5f       	subi	r22, 0xFC	; 252
   3eda6:	7f 4f       	sbci	r23, 0xFF	; 255
   3eda8:	8f 4f       	sbci	r24, 0xFF	; 255
   3edaa:	9f 4f       	sbci	r25, 0xFF	; 255
   3edac:	c2 5e       	subi	r28, 0xE2	; 226
   3edae:	de 4f       	sbci	r29, 0xFE	; 254
   3edb0:	68 83       	st	Y, r22
   3edb2:	79 83       	std	Y+1, r23	; 0x01
   3edb4:	8a 83       	std	Y+2, r24	; 0x02
   3edb6:	9b 83       	std	Y+3, r25	; 0x03
   3edb8:	ce 51       	subi	r28, 0x1E	; 30
   3edba:	d1 40       	sbci	r29, 0x01	; 1
		byte1	=	pgm_read_byte_near(myMemoryPtr++);
		byte2	=	pgm_read_byte_near(myMemoryPtr++);
		byte3	=	pgm_read_byte_near(myMemoryPtr++);
		byte4	=	pgm_read_byte_near(myMemoryPtr++);
	#endif
		word1	=	(byte2 << 8) + byte1;
   3edbc:	4e 2c       	mov	r4, r14
   3edbe:	51 2c       	mov	r5, r1
   3edc0:	61 2c       	mov	r6, r1
   3edc2:	71 2c       	mov	r7, r1
   3edc4:	76 2c       	mov	r7, r6
   3edc6:	65 2c       	mov	r6, r5
   3edc8:	54 2c       	mov	r5, r4
   3edca:	44 24       	eor	r4, r4
   3edcc:	40 0e       	add	r4, r16
   3edce:	51 1c       	adc	r5, r1
   3edd0:	61 1c       	adc	r6, r1
   3edd2:	71 1c       	adc	r7, r1
		word2	=	(byte4 << 8) + byte3;


		PrintHexByte(byte2);
   3edd4:	8e 2d       	mov	r24, r14
   3edd6:	0f 94 02 f2 	call	0x3e404	; 0x3e404 <PrintHexByte>
		sendchar(0x20);
   3edda:	80 e2       	ldi	r24, 0x20	; 32
   3eddc:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <sendchar>
		PrintHexByte(byte1);
   3ede0:	80 2f       	mov	r24, r16
   3ede2:	0f 94 02 f2 	call	0x3e404	; 0x3e404 <PrintHexByte>
		sendchar(0x20);
   3ede6:	80 e2       	ldi	r24, 0x20	; 32
   3ede8:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <sendchar>
		PrintHexByte(byte4);
   3edec:	8f 2d       	mov	r24, r15
   3edee:	0f 94 02 f2 	call	0x3e404	; 0x3e404 <PrintHexByte>
		sendchar(0x20);
   3edf2:	80 e2       	ldi	r24, 0x20	; 32
   3edf4:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <sendchar>
		PrintHexByte(byte3);
   3edf8:	8d 2d       	mov	r24, r13
   3edfa:	0f 94 02 f2 	call	0x3e404	; 0x3e404 <PrintHexByte>
		sendchar(0x20);
   3edfe:	80 e2       	ldi	r24, 0x20	; 32
   3ee00:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <sendchar>
	
		if (word1 == 0xffff)
   3ee04:	7f ef       	ldi	r23, 0xFF	; 255
   3ee06:	47 16       	cp	r4, r23
   3ee08:	57 06       	cpc	r5, r23
   3ee0a:	61 04       	cpc	r6, r1
   3ee0c:	71 04       	cpc	r7, r1
   3ee0e:	31 f4       	brne	.+12     	; 0x3ee1c <main+0x82c>
		{
			PrintFromPROGMEM_p(gTextMsg_noVector, 0);
   3ee10:	60 e0       	ldi	r22, 0x00	; 0
   3ee12:	88 ee       	ldi	r24, 0xE8	; 232
   3ee14:	91 ee       	ldi	r25, 0xE1	; 225
   3ee16:	0f 94 cf f1 	call	0x3e39e	; 0x3e39e <PrintFromPROGMEM_p>
   3ee1a:	a5 c0       	rjmp	.+330    	; 0x3ef66 <main+0x976>
		}
		else if ((word1 & 0xc000) == 0xc000)
   3ee1c:	d3 01       	movw	r26, r6
   3ee1e:	c2 01       	movw	r24, r4
   3ee20:	88 27       	eor	r24, r24
   3ee22:	90 7c       	andi	r25, 0xC0	; 192
   3ee24:	aa 27       	eor	r26, r26
   3ee26:	bb 27       	eor	r27, r27
   3ee28:	81 15       	cp	r24, r1
   3ee2a:	90 4c       	sbci	r25, 0xC0	; 192
   3ee2c:	a1 05       	cpc	r26, r1
   3ee2e:	b1 05       	cpc	r27, r1
   3ee30:	49 f5       	brne	.+82     	; 0x3ee84 <main+0x894>
		{
			//*	rjmp instruction
			realitiveAddr	=	word1 & 0x3FFF;
   3ee32:	73 01       	movw	r14, r6
   3ee34:	62 01       	movw	r12, r4
   3ee36:	ff e3       	ldi	r31, 0x3F	; 63
   3ee38:	df 22       	and	r13, r31
   3ee3a:	ee 24       	eor	r14, r14
   3ee3c:	ff 24       	eor	r15, r15
			absoluteAddr	=	wordMemoryAddress + realitiveAddr;	//*	add the offset to the current address
   3ee3e:	c5 5d       	subi	r28, 0xD5	; 213
   3ee40:	de 4f       	sbci	r29, 0xFE	; 254
   3ee42:	48 80       	ld	r4, Y
   3ee44:	59 80       	ldd	r5, Y+1	; 0x01
   3ee46:	6a 80       	ldd	r6, Y+2	; 0x02
   3ee48:	7b 80       	ldd	r7, Y+3	; 0x03
   3ee4a:	cb 52       	subi	r28, 0x2B	; 43
   3ee4c:	d1 40       	sbci	r29, 0x01	; 1
   3ee4e:	4c 0c       	add	r4, r12
   3ee50:	5d 1c       	adc	r5, r13
   3ee52:	6e 1c       	adc	r6, r14
   3ee54:	7f 1c       	adc	r7, r15
			absoluteAddr	=	absoluteAddr << 1;					//*	multiply by 2 for byte address
   3ee56:	44 0c       	add	r4, r4
   3ee58:	55 1c       	adc	r5, r5
   3ee5a:	66 1c       	adc	r6, r6
   3ee5c:	77 1c       	adc	r7, r7

			PrintFromPROGMEM_p(gTextMsg_rjmp, 0);
   3ee5e:	60 e0       	ldi	r22, 0x00	; 0
   3ee60:	81 ee       	ldi	r24, 0xE1	; 225
   3ee62:	91 ee       	ldi	r25, 0xE1	; 225
   3ee64:	0f 94 cf f1 	call	0x3e39e	; 0x3e39e <PrintFromPROGMEM_p>
			PrintHexByte((realitiveAddr >> 8) & 0x00ff);
   3ee68:	8d 2d       	mov	r24, r13
   3ee6a:	0f 94 02 f2 	call	0x3e404	; 0x3e404 <PrintHexByte>
			PrintHexByte((realitiveAddr) & 0x00ff);
   3ee6e:	8c 2d       	mov	r24, r12
   3ee70:	0f 94 02 f2 	call	0x3e404	; 0x3e404 <PrintHexByte>
			sendchar(0x20);
   3ee74:	80 e2       	ldi	r24, 0x20	; 32
   3ee76:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <sendchar>
			sendchar('>');
   3ee7a:	8e e3       	ldi	r24, 0x3E	; 62
   3ee7c:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <sendchar>
			PrintHexByte((absoluteAddr >> 16) & 0x00ff);
   3ee80:	80 e0       	ldi	r24, 0x00	; 0
   3ee82:	69 c0       	rjmp	.+210    	; 0x3ef56 <main+0x966>
			PrintHexByte((absoluteAddr >> 8) & 0x00ff);
			PrintHexByte((absoluteAddr) & 0x00ff);
	
		}
		else if ((word1 & 0xfE0E) == 0x940c)
   3ee84:	2e e0       	ldi	r18, 0x0E	; 14
   3ee86:	42 22       	and	r4, r18
   3ee88:	e8 94       	clt
   3ee8a:	50 f8       	bld	r5, 0
   3ee8c:	66 24       	eor	r6, r6
   3ee8e:	77 24       	eor	r7, r7
   3ee90:	3c e0       	ldi	r19, 0x0C	; 12
   3ee92:	43 16       	cp	r4, r19
   3ee94:	34 e9       	ldi	r19, 0x94	; 148
   3ee96:	53 06       	cpc	r5, r19
   3ee98:	61 04       	cpc	r6, r1
   3ee9a:	71 04       	cpc	r7, r1
   3ee9c:	09 f0       	breq	.+2      	; 0x3eea0 <main+0x8b0>
   3ee9e:	63 c0       	rjmp	.+198    	; 0x3ef66 <main+0x976>
		{
			//*	jmp instruction, this is REALLY complicated, refer to the instruction manual (JMP)
			myFullAddress	=	((byte1 & 0x01) << 16) +
   3eea0:	40 2f       	mov	r20, r16
   3eea2:	41 70       	andi	r20, 0x01	; 1
   3eea4:	44 2e       	mov	r4, r20
   3eea6:	51 2c       	mov	r5, r1
   3eea8:	61 2c       	mov	r6, r1
   3eeaa:	71 2c       	mov	r7, r1
   3eeac:	b2 01       	movw	r22, r4
   3eeae:	55 27       	eor	r21, r21
   3eeb0:	44 27       	eor	r20, r20
   3eeb2:	8f 2d       	mov	r24, r15
   3eeb4:	90 e0       	ldi	r25, 0x00	; 0
   3eeb6:	a0 e0       	ldi	r26, 0x00	; 0
   3eeb8:	b0 e0       	ldi	r27, 0x00	; 0
   3eeba:	ba 2f       	mov	r27, r26
   3eebc:	a9 2f       	mov	r26, r25
   3eebe:	98 2f       	mov	r25, r24
   3eec0:	88 27       	eor	r24, r24
   3eec2:	8d 0d       	add	r24, r13
   3eec4:	91 1d       	adc	r25, r1
   3eec6:	a1 1d       	adc	r26, r1
   3eec8:	b1 1d       	adc	r27, r1
   3eeca:	2a 01       	movw	r4, r20
   3eecc:	3b 01       	movw	r6, r22
   3eece:	48 0e       	add	r4, r24
   3eed0:	59 1e       	adc	r5, r25
   3eed2:	6a 1e       	adc	r6, r26
   3eed4:	7b 1e       	adc	r7, r27
   3eed6:	80 2f       	mov	r24, r16
   3eed8:	80 7f       	andi	r24, 0xF0	; 240
   3eeda:	90 e0       	ldi	r25, 0x00	; 0
   3eedc:	a0 e0       	ldi	r26, 0x00	; 0
   3eede:	b0 e0       	ldi	r27, 0x00	; 0
   3eee0:	ac 01       	movw	r20, r24
   3eee2:	bd 01       	movw	r22, r26
   3eee4:	31 e1       	ldi	r19, 0x11	; 17
   3eee6:	44 0f       	add	r20, r20
   3eee8:	55 1f       	adc	r21, r21
   3eeea:	66 1f       	adc	r22, r22
   3eeec:	77 1f       	adc	r23, r23
   3eeee:	3a 95       	dec	r19
   3eef0:	d1 f7       	brne	.-12     	; 0x3eee6 <main+0x8f6>
   3eef2:	d3 01       	movw	r26, r6
   3eef4:	c2 01       	movw	r24, r4
   3eef6:	84 0f       	add	r24, r20
   3eef8:	95 1f       	adc	r25, r21
   3eefa:	a6 1f       	adc	r26, r22
   3eefc:	b7 1f       	adc	r27, r23
   3eefe:	2e 2d       	mov	r18, r14
   3ef00:	21 70       	andi	r18, 0x01	; 1
   3ef02:	c2 2e       	mov	r12, r18
   3ef04:	d1 2c       	mov	r13, r1
   3ef06:	e1 2c       	mov	r14, r1
   3ef08:	f1 2c       	mov	r15, r1
   3ef0a:	45 e1       	ldi	r20, 0x15	; 21
   3ef0c:	cc 0c       	add	r12, r12
   3ef0e:	dd 1c       	adc	r13, r13
   3ef10:	ee 1c       	adc	r14, r14
   3ef12:	ff 1c       	adc	r15, r15
   3ef14:	4a 95       	dec	r20
   3ef16:	d1 f7       	brne	.-12     	; 0x3ef0c <main+0x91c>
   3ef18:	c8 0e       	add	r12, r24
   3ef1a:	d9 1e       	adc	r13, r25
   3ef1c:	ea 1e       	adc	r14, r26
   3ef1e:	fb 1e       	adc	r15, r27
								((byte1 & 0xf0) << 17) +
								((byte2 & 0x01) << 21) +
								word2;
							
			absoluteAddr	=	myFullAddress << 1;
   3ef20:	26 01       	movw	r4, r12
   3ef22:	37 01       	movw	r6, r14
   3ef24:	44 0c       	add	r4, r4
   3ef26:	55 1c       	adc	r5, r5
   3ef28:	66 1c       	adc	r6, r6
   3ef2a:	77 1c       	adc	r7, r7
							
			PrintFromPROGMEM_p(gTextMsg_jmp, 0);
   3ef2c:	60 e0       	ldi	r22, 0x00	; 0
   3ef2e:	8c ed       	ldi	r24, 0xDC	; 220
   3ef30:	91 ee       	ldi	r25, 0xE1	; 225
   3ef32:	0f 94 cf f1 	call	0x3e39e	; 0x3e39e <PrintFromPROGMEM_p>
			PrintHexByte((myFullAddress >> 16) & 0x00ff);
   3ef36:	8e 2d       	mov	r24, r14
   3ef38:	0f 94 02 f2 	call	0x3e404	; 0x3e404 <PrintHexByte>
			PrintHexByte((myFullAddress >> 8) & 0x00ff);
   3ef3c:	8d 2d       	mov	r24, r13
   3ef3e:	0f 94 02 f2 	call	0x3e404	; 0x3e404 <PrintHexByte>
			PrintHexByte((myFullAddress) & 0x00ff);
   3ef42:	8c 2d       	mov	r24, r12
   3ef44:	0f 94 02 f2 	call	0x3e404	; 0x3e404 <PrintHexByte>
			sendchar(0x20);
   3ef48:	80 e2       	ldi	r24, 0x20	; 32
   3ef4a:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <sendchar>
			sendchar('>');
   3ef4e:	8e e3       	ldi	r24, 0x3E	; 62
   3ef50:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <sendchar>
			PrintHexByte((absoluteAddr >> 16) & 0x00ff);
   3ef54:	86 2d       	mov	r24, r6
   3ef56:	0f 94 02 f2 	call	0x3e404	; 0x3e404 <PrintHexByte>
			PrintHexByte((absoluteAddr >> 8) & 0x00ff);
   3ef5a:	85 2d       	mov	r24, r5
   3ef5c:	0f 94 02 f2 	call	0x3e404	; 0x3e404 <PrintHexByte>
			PrintHexByte((absoluteAddr) & 0x00ff);
   3ef60:	84 2d       	mov	r24, r4
   3ef62:	0f 94 02 f2 	call	0x3e404	; 0x3e404 <PrintHexByte>
	#else
		stringPointer	=	pgm_read_word_near(&(gInterruptNameTable[vectorIndex]));
	#endif
		PrintFromPROGMEM_p((char *)stringPointer, 0);
	#endif
		PrintNewLine();
   3ef66:	0f 94 ec f1 	call	0x3e3d8	; 0x3e3d8 <PrintNewLine>
	vectorIndex		=	0;
	PrintFromPROGMEMln_p(gTextMsg_CPU_Name, 0);
	PrintFromPROGMEMln_p(gTextMsg_VECTOR_HEADER, 0);
	//					 V#   ADDR   op code
	//					  1 - 0000 = C3 BB 00 00 rjmp 03BB >000776 RESET
	while (vectorIndex < kInterruptVectorCount)
   3ef6a:	49 e3       	ldi	r20, 0x39	; 57
   3ef6c:	24 16       	cp	r2, r20
   3ef6e:	31 04       	cpc	r3, r1
   3ef70:	09 f0       	breq	.+2      	; 0x3ef74 <main+0x984>
   3ef72:	a7 ce       	rjmp	.-690    	; 0x3ecc2 <main+0x6d2>
   3ef74:	32 cc       	rjmp	.-1948   	; 0x3e7da <main+0x1ea>
				PrintFromPROGMEMln_p(gTextMsg_HELP_MSG_V, 2);
				VectorDisplay();
				break;

			case 'Y':
				PrintFromPROGMEMln_p(gTextMsg_HELP_MSG_Y, 2);
   3ef76:	62 e0       	ldi	r22, 0x02	; 2
   3ef78:	86 ee       	ldi	r24, 0xE6	; 230
   3ef7a:	90 ee       	ldi	r25, 0xE0	; 224
   3ef7c:	0f 94 f2 f1 	call	0x3e3e4	; 0x3e3e4 <PrintFromPROGMEMln_p>
static void	AVR_PortOutput(void)
{
char	portLetter;
char	getCharFlag;

	PrintFromPROGMEM_p(gTextMsg_WHAT_PORT, 0);
   3ef80:	60 e0       	ldi	r22, 0x00	; 0
   3ef82:	81 ed       	ldi	r24, 0xD1	; 209
   3ef84:	91 ee       	ldi	r25, 0xE1	; 225
   3ef86:	0f 94 cf f1 	call	0x3e39e	; 0x3e39e <PrintFromPROGMEM_p>

	portLetter	=	recchar();
   3ef8a:	0f 94 4d f2 	call	0x3e49a	; 0x3e49a <recchar>
	portLetter	=	portLetter & 0x5f;
   3ef8e:	08 2f       	mov	r16, r24
   3ef90:	0f 75       	andi	r16, 0x5F	; 95
	sendchar(portLetter);
   3ef92:	80 2f       	mov	r24, r16
   3ef94:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <sendchar>
	PrintNewLine();
   3ef98:	0f 94 ec f1 	call	0x3e3d8	; 0x3e3d8 <PrintNewLine>

	if ((portLetter >= 'A') && (portLetter <= 'Z'))
   3ef9c:	8f eb       	ldi	r24, 0xBF	; 191
   3ef9e:	80 0f       	add	r24, r16
   3efa0:	8a 31       	cpi	r24, 0x1A	; 26
   3efa2:	08 f0       	brcs	.+2      	; 0x3efa6 <main+0x9b6>
   3efa4:	de c0       	rjmp	.+444    	; 0x3f162 <main+0xb72>
	{
		getCharFlag	=	true;
		switch(portLetter)
   3efa6:	06 34       	cpi	r16, 0x46	; 70
   3efa8:	09 f4       	brne	.+2      	; 0x3efac <main+0x9bc>
   3efaa:	71 c0       	rjmp	.+226    	; 0x3f08e <main+0xa9e>
   3efac:	98 f4       	brcc	.+38     	; 0x3efd4 <main+0x9e4>
   3efae:	03 34       	cpi	r16, 0x43	; 67
   3efb0:	09 f4       	brne	.+2      	; 0x3efb4 <main+0x9c4>
   3efb2:	41 c0       	rjmp	.+130    	; 0x3f036 <main+0xa46>
   3efb4:	38 f4       	brcc	.+14     	; 0x3efc4 <main+0x9d4>
   3efb6:	01 34       	cpi	r16, 0x41	; 65
   3efb8:	19 f1       	breq	.+70     	; 0x3f000 <main+0xa10>
   3efba:	02 34       	cpi	r16, 0x42	; 66
   3efbc:	09 f0       	breq	.+2      	; 0x3efc0 <main+0x9d0>
   3efbe:	cd c0       	rjmp	.+410    	; 0x3f15a <main+0xb6a>
				break;
		#endif

		#ifdef DDRB
			case 'B':
				DDRB	=	0xff;
   3efc0:	14 b9       	out	0x04, r17	; 4
   3efc2:	2b c0       	rjmp	.+86     	; 0x3f01a <main+0xa2a>
	PrintNewLine();

	if ((portLetter >= 'A') && (portLetter <= 'Z'))
	{
		getCharFlag	=	true;
		switch(portLetter)
   3efc4:	04 34       	cpi	r16, 0x44	; 68
   3efc6:	09 f4       	brne	.+2      	; 0x3efca <main+0x9da>
   3efc8:	45 c0       	rjmp	.+138    	; 0x3f054 <main+0xa64>
   3efca:	05 34       	cpi	r16, 0x45	; 69
   3efcc:	09 f0       	breq	.+2      	; 0x3efd0 <main+0x9e0>
   3efce:	c5 c0       	rjmp	.+394    	; 0x3f15a <main+0xb6a>
				break;
		#endif

		#ifdef DDRE
			case 'E':
				DDRE	=	0xff;
   3efd0:	1d b9       	out	0x0d, r17	; 13
   3efd2:	4f c0       	rjmp	.+158    	; 0x3f072 <main+0xa82>
	PrintNewLine();

	if ((portLetter >= 'A') && (portLetter <= 'Z'))
	{
		getCharFlag	=	true;
		switch(portLetter)
   3efd4:	0a 34       	cpi	r16, 0x4A	; 74
   3efd6:	09 f4       	brne	.+2      	; 0x3efda <main+0x9ea>
   3efd8:	89 c0       	rjmp	.+274    	; 0x3f0ec <main+0xafc>
   3efda:	48 f4       	brcc	.+18     	; 0x3efee <main+0x9fe>
   3efdc:	07 34       	cpi	r16, 0x47	; 71
   3efde:	09 f4       	brne	.+2      	; 0x3efe2 <main+0x9f2>
   3efe0:	65 c0       	rjmp	.+202    	; 0x3f0ac <main+0xabc>
   3efe2:	08 34       	cpi	r16, 0x48	; 72
   3efe4:	09 f0       	breq	.+2      	; 0x3efe8 <main+0x9f8>
   3efe6:	b9 c0       	rjmp	.+370    	; 0x3f15a <main+0xb6a>
				break;
		#endif

		#ifdef DDRH
			case 'H':
				DDRH	=	0xff;
   3efe8:	10 93 01 01 	sts	0x0101, r17	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
   3efec:	6e c0       	rjmp	.+220    	; 0x3f0ca <main+0xada>
	PrintNewLine();

	if ((portLetter >= 'A') && (portLetter <= 'Z'))
	{
		getCharFlag	=	true;
		switch(portLetter)
   3efee:	0b 34       	cpi	r16, 0x4B	; 75
   3eff0:	09 f4       	brne	.+2      	; 0x3eff4 <main+0xa04>
   3eff2:	8f c0       	rjmp	.+286    	; 0x3f112 <main+0xb22>
   3eff4:	0c 34       	cpi	r16, 0x4C	; 76
   3eff6:	09 f0       	breq	.+2      	; 0x3effa <main+0xa0a>
   3eff8:	b0 c0       	rjmp	.+352    	; 0x3f15a <main+0xb6a>
				break;
		#endif

		#ifdef DDRL
			case 'L':
				DDRL	=	0xff;
   3effa:	10 93 0a 01 	sts	0x010A, r17	; 0x80010a <__TEXT_REGION_LENGTH__+0x70010a>
   3effe:	9c c0       	rjmp	.+312    	; 0x3f138 <main+0xb48>
		getCharFlag	=	true;
		switch(portLetter)
		{
		#ifdef DDRA
			case 'A':
				DDRA	=	0xff;
   3f000:	11 b9       	out	0x01, r17	; 1


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   3f002:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
		switch(portLetter)
		{
		#ifdef DDRA
			case 'A':
				DDRA	=	0xff;
				while (!Serial_Available())
   3f006:	87 fd       	sbrc	r24, 7
   3f008:	a7 cd       	rjmp	.-1202   	; 0x3eb58 <main+0x568>
				{
					PORTA	^=	0xff;
   3f00a:	82 b1       	in	r24, 0x02	; 2
   3f00c:	80 95       	com	r24
   3f00e:	82 b9       	out	0x02, r24	; 2
					delay_ms(200);
   3f010:	88 ec       	ldi	r24, 0xC8	; 200
   3f012:	90 e0       	ldi	r25, 0x00	; 0
   3f014:	0f 94 c0 f1 	call	0x3e380	; 0x3e380 <delay_ms>
   3f018:	f4 cf       	rjmp	.-24     	; 0x3f002 <main+0xa12>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   3f01a:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
		#endif

		#ifdef DDRB
			case 'B':
				DDRB	=	0xff;
				while (!Serial_Available())
   3f01e:	87 fd       	sbrc	r24, 7
   3f020:	08 c0       	rjmp	.+16     	; 0x3f032 <main+0xa42>
				{
					PORTB	^=	0xff;
   3f022:	85 b1       	in	r24, 0x05	; 5
   3f024:	80 95       	com	r24
   3f026:	85 b9       	out	0x05, r24	; 5
					delay_ms(200);
   3f028:	88 ec       	ldi	r24, 0xC8	; 200
   3f02a:	90 e0       	ldi	r25, 0x00	; 0
   3f02c:	0f 94 c0 f1 	call	0x3e380	; 0x3e380 <delay_ms>
   3f030:	f4 cf       	rjmp	.-24     	; 0x3f01a <main+0xa2a>
				}
				PORTB	=	0;
   3f032:	15 b8       	out	0x05, r1	; 5
   3f034:	92 cd       	rjmp	.-1244   	; 0x3eb5a <main+0x56a>
				break;
		#endif

		#ifdef DDRC
			case 'C':
				DDRC	=	0xff;
   3f036:	17 b9       	out	0x07, r17	; 7


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   3f038:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
		#endif

		#ifdef DDRC
			case 'C':
				DDRC	=	0xff;
				while (!Serial_Available())
   3f03c:	87 fd       	sbrc	r24, 7
   3f03e:	08 c0       	rjmp	.+16     	; 0x3f050 <main+0xa60>
				{
					PORTC	^=	0xff;
   3f040:	88 b1       	in	r24, 0x08	; 8
   3f042:	80 95       	com	r24
   3f044:	88 b9       	out	0x08, r24	; 8
					delay_ms(200);
   3f046:	88 ec       	ldi	r24, 0xC8	; 200
   3f048:	90 e0       	ldi	r25, 0x00	; 0
   3f04a:	0f 94 c0 f1 	call	0x3e380	; 0x3e380 <delay_ms>
   3f04e:	f4 cf       	rjmp	.-24     	; 0x3f038 <main+0xa48>
				}
				PORTC	=	0;
   3f050:	18 b8       	out	0x08, r1	; 8
   3f052:	83 cd       	rjmp	.-1274   	; 0x3eb5a <main+0x56a>
				break;
		#endif

		#ifdef DDRD
			case 'D':
				DDRD	=	0xff;
   3f054:	1a b9       	out	0x0a, r17	; 10


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   3f056:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
		#endif

		#ifdef DDRD
			case 'D':
				DDRD	=	0xff;
				while (!Serial_Available())
   3f05a:	87 fd       	sbrc	r24, 7
   3f05c:	08 c0       	rjmp	.+16     	; 0x3f06e <main+0xa7e>
				{
					PORTD	^=	0xff;
   3f05e:	8b b1       	in	r24, 0x0b	; 11
   3f060:	80 95       	com	r24
   3f062:	8b b9       	out	0x0b, r24	; 11
					delay_ms(200);
   3f064:	88 ec       	ldi	r24, 0xC8	; 200
   3f066:	90 e0       	ldi	r25, 0x00	; 0
   3f068:	0f 94 c0 f1 	call	0x3e380	; 0x3e380 <delay_ms>
   3f06c:	f4 cf       	rjmp	.-24     	; 0x3f056 <main+0xa66>
				}
				PORTD	=	0;
   3f06e:	1b b8       	out	0x0b, r1	; 11
   3f070:	74 cd       	rjmp	.-1304   	; 0x3eb5a <main+0x56a>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   3f072:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
		#endif

		#ifdef DDRE
			case 'E':
				DDRE	=	0xff;
				while (!Serial_Available())
   3f076:	87 fd       	sbrc	r24, 7
   3f078:	08 c0       	rjmp	.+16     	; 0x3f08a <main+0xa9a>
				{
					PORTE	^=	0xff;
   3f07a:	8e b1       	in	r24, 0x0e	; 14
   3f07c:	80 95       	com	r24
   3f07e:	8e b9       	out	0x0e, r24	; 14
					delay_ms(200);
   3f080:	88 ec       	ldi	r24, 0xC8	; 200
   3f082:	90 e0       	ldi	r25, 0x00	; 0
   3f084:	0f 94 c0 f1 	call	0x3e380	; 0x3e380 <delay_ms>
   3f088:	f4 cf       	rjmp	.-24     	; 0x3f072 <main+0xa82>
				}
				PORTE	=	0;
   3f08a:	1e b8       	out	0x0e, r1	; 14
   3f08c:	66 cd       	rjmp	.-1332   	; 0x3eb5a <main+0x56a>
				break;
		#endif

		#ifdef DDRF
			case 'F':
				DDRF	=	0xff;
   3f08e:	10 bb       	out	0x10, r17	; 16


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   3f090:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
		#endif

		#ifdef DDRF
			case 'F':
				DDRF	=	0xff;
				while (!Serial_Available())
   3f094:	87 fd       	sbrc	r24, 7
   3f096:	08 c0       	rjmp	.+16     	; 0x3f0a8 <main+0xab8>
				{
					PORTF	^=	0xff;
   3f098:	81 b3       	in	r24, 0x11	; 17
   3f09a:	80 95       	com	r24
   3f09c:	81 bb       	out	0x11, r24	; 17
					delay_ms(200);
   3f09e:	88 ec       	ldi	r24, 0xC8	; 200
   3f0a0:	90 e0       	ldi	r25, 0x00	; 0
   3f0a2:	0f 94 c0 f1 	call	0x3e380	; 0x3e380 <delay_ms>
   3f0a6:	f4 cf       	rjmp	.-24     	; 0x3f090 <main+0xaa0>
				}
				PORTF	=	0;
   3f0a8:	11 ba       	out	0x11, r1	; 17
   3f0aa:	57 cd       	rjmp	.-1362   	; 0x3eb5a <main+0x56a>
				break;
		#endif

		#ifdef DDRG
			case 'G':
				DDRG	=	0xff;
   3f0ac:	13 bb       	out	0x13, r17	; 19


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   3f0ae:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
		#endif

		#ifdef DDRG
			case 'G':
				DDRG	=	0xff;
				while (!Serial_Available())
   3f0b2:	87 fd       	sbrc	r24, 7
   3f0b4:	08 c0       	rjmp	.+16     	; 0x3f0c6 <main+0xad6>
				{
					PORTG	^=	0xff;
   3f0b6:	84 b3       	in	r24, 0x14	; 20
   3f0b8:	80 95       	com	r24
   3f0ba:	84 bb       	out	0x14, r24	; 20
					delay_ms(200);
   3f0bc:	88 ec       	ldi	r24, 0xC8	; 200
   3f0be:	90 e0       	ldi	r25, 0x00	; 0
   3f0c0:	0f 94 c0 f1 	call	0x3e380	; 0x3e380 <delay_ms>
   3f0c4:	f4 cf       	rjmp	.-24     	; 0x3f0ae <main+0xabe>
				}
				PORTG	=	0;
   3f0c6:	14 ba       	out	0x14, r1	; 20
   3f0c8:	48 cd       	rjmp	.-1392   	; 0x3eb5a <main+0x56a>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   3f0ca:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
		#endif

		#ifdef DDRH
			case 'H':
				DDRH	=	0xff;
				while (!Serial_Available())
   3f0ce:	87 fd       	sbrc	r24, 7
   3f0d0:	0a c0       	rjmp	.+20     	; 0x3f0e6 <main+0xaf6>
				{
					PORTH	^=	0xff;
   3f0d2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
   3f0d6:	80 95       	com	r24
   3f0d8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
					delay_ms(200);
   3f0dc:	88 ec       	ldi	r24, 0xC8	; 200
   3f0de:	90 e0       	ldi	r25, 0x00	; 0
   3f0e0:	0f 94 c0 f1 	call	0x3e380	; 0x3e380 <delay_ms>
   3f0e4:	f2 cf       	rjmp	.-28     	; 0x3f0ca <main+0xada>
				}
				PORTH	=	0;
   3f0e6:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
   3f0ea:	37 cd       	rjmp	.-1426   	; 0x3eb5a <main+0x56a>
				break;
		#endif

		#ifdef DDRJ
			case 'J':
				DDRJ	=	0xff;
   3f0ec:	10 93 04 01 	sts	0x0104, r17	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   3f0f0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
		#endif

		#ifdef DDRJ
			case 'J':
				DDRJ	=	0xff;
				while (!Serial_Available())
   3f0f4:	87 fd       	sbrc	r24, 7
   3f0f6:	0a c0       	rjmp	.+20     	; 0x3f10c <main+0xb1c>
				{
					PORTJ	^=	0xff;
   3f0f8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
   3f0fc:	80 95       	com	r24
   3f0fe:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
					delay_ms(200);
   3f102:	88 ec       	ldi	r24, 0xC8	; 200
   3f104:	90 e0       	ldi	r25, 0x00	; 0
   3f106:	0f 94 c0 f1 	call	0x3e380	; 0x3e380 <delay_ms>
   3f10a:	f2 cf       	rjmp	.-28     	; 0x3f0f0 <main+0xb00>
				}
				PORTJ	=	0;
   3f10c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
   3f110:	24 cd       	rjmp	.-1464   	; 0x3eb5a <main+0x56a>
				break;
		#endif

		#ifdef DDRK
			case 'K':
				DDRK	=	0xff;
   3f112:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   3f116:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
		#endif

		#ifdef DDRK
			case 'K':
				DDRK	=	0xff;
				while (!Serial_Available())
   3f11a:	87 fd       	sbrc	r24, 7
   3f11c:	0a c0       	rjmp	.+20     	; 0x3f132 <main+0xb42>
				{
					PORTK	^=	0xff;
   3f11e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
   3f122:	80 95       	com	r24
   3f124:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
					delay_ms(200);
   3f128:	88 ec       	ldi	r24, 0xC8	; 200
   3f12a:	90 e0       	ldi	r25, 0x00	; 0
   3f12c:	0f 94 c0 f1 	call	0x3e380	; 0x3e380 <delay_ms>
   3f130:	f2 cf       	rjmp	.-28     	; 0x3f116 <main+0xb26>
				}
				PORTK	=	0;
   3f132:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
   3f136:	11 cd       	rjmp	.-1502   	; 0x3eb5a <main+0x56a>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   3f138:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
		#endif

		#ifdef DDRL
			case 'L':
				DDRL	=	0xff;
				while (!Serial_Available())
   3f13c:	87 fd       	sbrc	r24, 7
   3f13e:	0a c0       	rjmp	.+20     	; 0x3f154 <main+0xb64>
				{
					PORTL	^=	0xff;
   3f140:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
   3f144:	80 95       	com	r24
   3f146:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
					delay_ms(200);
   3f14a:	88 ec       	ldi	r24, 0xC8	; 200
   3f14c:	90 e0       	ldi	r25, 0x00	; 0
   3f14e:	0f 94 c0 f1 	call	0x3e380	; 0x3e380 <delay_ms>
   3f152:	f2 cf       	rjmp	.-28     	; 0x3f138 <main+0xb48>
				}
				PORTL	=	0;
   3f154:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
   3f158:	00 cd       	rjmp	.-1536   	; 0x3eb5a <main+0x56a>
				break;
		#endif

			default:
				PrintFromPROGMEMln_p(gTextMsg_PortNotSupported, 0);
   3f15a:	60 e0       	ldi	r22, 0x00	; 0
   3f15c:	8e eb       	ldi	r24, 0xBE	; 190
   3f15e:	91 ee       	ldi	r25, 0xE1	; 225
   3f160:	07 c0       	rjmp	.+14     	; 0x3f170 <main+0xb80>
			recchar();
		}
	}
	else
	{
		PrintFromPROGMEMln_p(gTextMsg_MustBeLetter, 0);
   3f162:	60 e0       	ldi	r22, 0x00	; 0
   3f164:	8d ea       	ldi	r24, 0xAD	; 173
   3f166:	91 ee       	ldi	r25, 0xE1	; 225
   3f168:	03 c0       	rjmp	.+6      	; 0x3f170 <main+0xb80>
				PrintFromPROGMEMln_p(gTextMsg_HELP_MSG_Y, 2);
				AVR_PortOutput();
				break;
			
			default:
				PrintFromPROGMEMln_p(gTextMsg_HUH, 0);
   3f16a:	60 e0       	ldi	r22, 0x00	; 0
   3f16c:	85 ed       	ldi	r24, 0xD5	; 213
   3f16e:	92 ee       	ldi	r25, 0xE2	; 226
   3f170:	0f 94 f2 f1 	call	0x3e3e4	; 0x3e3e4 <PrintFromPROGMEMln_p>
   3f174:	32 cb       	rjmp	.-2460   	; 0x3e7da <main+0x1ea>
				{
					exPointCntr	=	0;
				}
			#endif

				switch (msgParseState)
   3f176:	83 30       	cpi	r24, 0x03	; 3
   3f178:	49 f1       	breq	.+82     	; 0x3f1cc <main+0xbdc>
   3f17a:	20 f4       	brcc	.+8      	; 0x3f184 <main+0xb94>
   3f17c:	81 30       	cpi	r24, 0x01	; 1
   3f17e:	99 f0       	breq	.+38     	; 0x3f1a6 <main+0xbb6>
   3f180:	50 f0       	brcs	.+20     	; 0x3f196 <main+0xba6>
   3f182:	1b c0       	rjmp	.+54     	; 0x3f1ba <main+0xbca>
   3f184:	85 30       	cpi	r24, 0x05	; 5
   3f186:	a9 f1       	breq	.+106    	; 0x3f1f2 <main+0xc02>
   3f188:	38 f1       	brcs	.+78     	; 0x3f1d8 <main+0xbe8>
   3f18a:	86 30       	cpi	r24, 0x06	; 6
   3f18c:	09 f0       	breq	.+2      	; 0x3f190 <main+0xba0>
   3f18e:	64 c0       	rjmp	.+200    	; 0x3f258 <main+0xc68>
						break;
					}
				}
				else
				{
					exPointCntr	=	0;
   3f190:	e1 2c       	mov	r14, r1
   3f192:	f1 2c       	mov	r15, r1
   3f194:	5e c0       	rjmp	.+188    	; 0x3f252 <main+0xc62>
   3f196:	e1 2c       	mov	r14, r1
   3f198:	f1 2c       	mov	r15, r1
			#endif

				switch (msgParseState)
				{
					case ST_START:
						if ( c == MESSAGE_START )
   3f19a:	9b 31       	cpi	r25, 0x1B	; 27
   3f19c:	09 f4       	brne	.+2      	; 0x3f1a0 <main+0xbb0>
   3f19e:	7e c2       	rjmp	.+1276   	; 0x3f69c <main+0x10ac>
   3f1a0:	00 e0       	ldi	r16, 0x00	; 0
   3f1a2:	10 e0       	ldi	r17, 0x00	; 0
   3f1a4:	b3 ca       	rjmp	.-2714   	; 0x3e70c <main+0x11c>
						break;
					}
				}
				else
				{
					exPointCntr	=	0;
   3f1a6:	e1 2c       	mov	r14, r1
   3f1a8:	f1 2c       	mov	r15, r1

					case ST_GET_SEQ_NUM:
					#ifdef _FIX_ISSUE_505_
						seqNum			=	c;
						msgParseState	=	ST_MSG_SIZE_1;
						checksum		^=	c;
   3f1aa:	79 26       	eor	r7, r25
						else
						{
							msgParseState	=	ST_START;
						}
					#endif
						break;
   3f1ac:	ca 5d       	subi	r28, 0xDA	; 218
   3f1ae:	de 4f       	sbci	r29, 0xFE	; 254
   3f1b0:	98 83       	st	Y, r25
   3f1b2:	c6 52       	subi	r28, 0x26	; 38
   3f1b4:	d1 40       	sbci	r29, 0x01	; 1
						break;

					case ST_GET_SEQ_NUM:
					#ifdef _FIX_ISSUE_505_
						seqNum			=	c;
						msgParseState	=	ST_MSG_SIZE_1;
   3f1b6:	82 e0       	ldi	r24, 0x02	; 2
						else
						{
							msgParseState	=	ST_START;
						}
					#endif
						break;
   3f1b8:	f3 cf       	rjmp	.-26     	; 0x3f1a0 <main+0xbb0>
						break;
					}
				}
				else
				{
					exPointCntr	=	0;
   3f1ba:	e1 2c       	mov	r14, r1
   3f1bc:	f1 2c       	mov	r15, r1
						}
					#endif
						break;

					case ST_MSG_SIZE_1:
						msgLength		=	c<<8;
   3f1be:	29 2f       	mov	r18, r25
   3f1c0:	30 e0       	ldi	r19, 0x00	; 0
   3f1c2:	32 2f       	mov	r19, r18
   3f1c4:	22 27       	eor	r18, r18
						msgParseState	=	ST_MSG_SIZE_2;
						checksum		^=	c;
   3f1c6:	79 26       	eor	r7, r25
					#endif
						break;

					case ST_MSG_SIZE_1:
						msgLength		=	c<<8;
						msgParseState	=	ST_MSG_SIZE_2;
   3f1c8:	83 e0       	ldi	r24, 0x03	; 3
						checksum		^=	c;
						break;
   3f1ca:	ea cf       	rjmp	.-44     	; 0x3f1a0 <main+0xbb0>
						break;
					}
				}
				else
				{
					exPointCntr	=	0;
   3f1cc:	e1 2c       	mov	r14, r1
   3f1ce:	f1 2c       	mov	r15, r1
						msgParseState	=	ST_MSG_SIZE_2;
						checksum		^=	c;
						break;

					case ST_MSG_SIZE_2:
						msgLength		|=	c;
   3f1d0:	29 2b       	or	r18, r25
						msgParseState	=	ST_GET_TOKEN;
						checksum		^=	c;
   3f1d2:	79 26       	eor	r7, r25
						checksum		^=	c;
						break;

					case ST_MSG_SIZE_2:
						msgLength		|=	c;
						msgParseState	=	ST_GET_TOKEN;
   3f1d4:	84 e0       	ldi	r24, 0x04	; 4
						checksum		^=	c;
						break;
   3f1d6:	e4 cf       	rjmp	.-56     	; 0x3f1a0 <main+0xbb0>

					case ST_GET_TOKEN:
						if ( c == TOKEN )
   3f1d8:	9e 30       	cpi	r25, 0x0E	; 14
   3f1da:	09 f0       	breq	.+2      	; 0x3f1de <main+0xbee>
   3f1dc:	63 c2       	rjmp	.+1222   	; 0x3f6a4 <main+0x10b4>
						{
							msgParseState	=	ST_GET_DATA;
							checksum		^=	c;
   3f1de:	79 26       	eor	r7, r25
						break;
					}
				}
				else
				{
					exPointCntr	=	0;
   3f1e0:	e1 2c       	mov	r14, r1
   3f1e2:	f1 2c       	mov	r15, r1
					case ST_GET_TOKEN:
						if ( c == TOKEN )
						{
							msgParseState	=	ST_GET_DATA;
							checksum		^=	c;
							ii				=	0;
   3f1e4:	c9 5d       	subi	r28, 0xD9	; 217
   3f1e6:	de 4f       	sbci	r29, 0xFE	; 254
   3f1e8:	19 82       	std	Y+1, r1	; 0x01
   3f1ea:	18 82       	st	Y, r1
   3f1ec:	c7 52       	subi	r28, 0x27	; 39
   3f1ee:	d1 40       	sbci	r29, 0x01	; 1
   3f1f0:	22 c0       	rjmp	.+68     	; 0x3f236 <main+0xc46>
						break;
					}
				}
				else
				{
					exPointCntr	=	0;
   3f1f2:	e1 2c       	mov	r14, r1
   3f1f4:	f1 2c       	mov	r15, r1
							msgParseState	=	ST_START;
						}
						break;

					case ST_GET_DATA:
						msgBuffer[ii++]	=	c;
   3f1f6:	c9 5d       	subi	r28, 0xD9	; 217
   3f1f8:	de 4f       	sbci	r29, 0xFE	; 254
   3f1fa:	48 81       	ld	r20, Y
   3f1fc:	59 81       	ldd	r21, Y+1	; 0x01
   3f1fe:	c7 52       	subi	r28, 0x27	; 39
   3f200:	d1 40       	sbci	r29, 0x01	; 1
   3f202:	4f 5f       	subi	r20, 0xFF	; 255
   3f204:	5f 4f       	sbci	r21, 0xFF	; 255
   3f206:	e1 e0       	ldi	r30, 0x01	; 1
   3f208:	f0 e0       	ldi	r31, 0x00	; 0
   3f20a:	ec 0f       	add	r30, r28
   3f20c:	fd 1f       	adc	r31, r29
   3f20e:	c9 5d       	subi	r28, 0xD9	; 217
   3f210:	de 4f       	sbci	r29, 0xFE	; 254
   3f212:	68 81       	ld	r22, Y
   3f214:	79 81       	ldd	r23, Y+1	; 0x01
   3f216:	c7 52       	subi	r28, 0x27	; 39
   3f218:	d1 40       	sbci	r29, 0x01	; 1
   3f21a:	e6 0f       	add	r30, r22
   3f21c:	f7 1f       	adc	r31, r23
   3f21e:	90 83       	st	Z, r25
						checksum		^=	c;
   3f220:	79 26       	eor	r7, r25
						if (ii == msgLength )
   3f222:	24 17       	cp	r18, r20
   3f224:	35 07       	cpc	r19, r21
   3f226:	09 f4       	brne	.+2      	; 0x3f22a <main+0xc3a>
   3f228:	40 c2       	rjmp	.+1152   	; 0x3f6aa <main+0x10ba>
   3f22a:	c9 5d       	subi	r28, 0xD9	; 217
   3f22c:	de 4f       	sbci	r29, 0xFE	; 254
   3f22e:	59 83       	std	Y+1, r21	; 0x01
   3f230:	48 83       	st	Y, r20
   3f232:	c7 52       	subi	r28, 0x27	; 39
   3f234:	d1 40       	sbci	r29, 0x01	; 1
   3f236:	85 e0       	ldi	r24, 0x05	; 5
   3f238:	b3 cf       	rjmp	.-154    	; 0x3f1a0 <main+0xbb0>
						break;
					}
				}
				else
				{
					exPointCntr	=	0;
   3f23a:	e1 2c       	mov	r14, r1
   3f23c:	f1 2c       	mov	r15, r1
				}
			#endif

				switch (msgParseState)
   3f23e:	83 30       	cpi	r24, 0x03	; 3
   3f240:	39 f2       	breq	.-114    	; 0x3f1d0 <main+0xbe0>
   3f242:	08 f4       	brcc	.+2      	; 0x3f246 <main+0xc56>
   3f244:	3a c2       	rjmp	.+1140   	; 0x3f6ba <main+0x10ca>
   3f246:	85 30       	cpi	r24, 0x05	; 5
   3f248:	b1 f2       	breq	.-84     	; 0x3f1f6 <main+0xc06>
   3f24a:	08 f4       	brcc	.+2      	; 0x3f24e <main+0xc5e>
   3f24c:	3b c2       	rjmp	.+1142   	; 0x3f6c4 <main+0x10d4>
   3f24e:	86 30       	cpi	r24, 0x06	; 6
   3f250:	29 f4       	brne	.+10     	; 0x3f25c <main+0xc6c>
							msgParseState	=	ST_GET_CHECK;
						}
						break;

					case ST_GET_CHECK:
						if ( c == checksum )
   3f252:	97 11       	cpse	r25, r7
   3f254:	37 c2       	rjmp	.+1134   	; 0x3f6c4 <main+0x10d4>
   3f256:	05 c0       	rjmp	.+10     	; 0x3f262 <main+0xc72>
						break;
					}
				}
				else
				{
					exPointCntr	=	0;
   3f258:	e1 2c       	mov	r14, r1
   3f25a:	f1 2c       	mov	r15, r1
		{
			/*
			 * Collect received bytes to a complete message
			 */
			msgParseState	=	ST_START;
			while ( msgParseState != ST_PROCESS )
   3f25c:	87 30       	cpi	r24, 0x07	; 7
   3f25e:	09 f0       	breq	.+2      	; 0x3f262 <main+0xc72>
   3f260:	9f cf       	rjmp	.-194    	; 0x3f1a0 <main+0xbb0>
   3f262:	61 2c       	mov	r6, r1

			/*
			 * Now process the STK500 commands, see Atmel Appnote AVR068
			 */

			switch (msgBuffer[0])
   3f264:	29 81       	ldd	r18, Y+1	; 0x01
   3f266:	23 31       	cpi	r18, 0x13	; 19
   3f268:	09 f4       	brne	.+2      	; 0x3f26c <main+0xc7c>
   3f26a:	d8 c0       	rjmp	.+432    	; 0x3f41c <main+0xe2c>
   3f26c:	60 f5       	brcc	.+88     	; 0x3f2c6 <main+0xcd6>
   3f26e:	26 30       	cpi	r18, 0x06	; 6
   3f270:	09 f4       	brne	.+2      	; 0x3f274 <main+0xc84>
   3f272:	c6 c0       	rjmp	.+396    	; 0x3f400 <main+0xe10>
   3f274:	f8 f4       	brcc	.+62     	; 0x3f2b4 <main+0xcc4>
   3f276:	22 30       	cpi	r18, 0x02	; 2
   3f278:	09 f4       	brne	.+2      	; 0x3f27c <main+0xc8c>
   3f27a:	ce c0       	rjmp	.+412    	; 0x3f418 <main+0xe28>
   3f27c:	23 30       	cpi	r18, 0x03	; 3
   3f27e:	09 f4       	brne	.+2      	; 0x3f282 <main+0xc92>
   3f280:	64 c0       	rjmp	.+200    	; 0x3f34a <main+0xd5a>
   3f282:	21 30       	cpi	r18, 0x01	; 1
   3f284:	09 f0       	breq	.+2      	; 0x3f288 <main+0xc98>
   3f286:	ae c1       	rjmp	.+860    	; 0x3f5e4 <main+0xff4>
					}
					break;
	#endif
				case CMD_SIGN_ON:
					msgLength		=	11;
					msgBuffer[1] 	=	STATUS_CMD_OK;
   3f288:	1a 82       	std	Y+2, r1	; 0x02
					msgBuffer[2] 	=	8;
   3f28a:	88 e0       	ldi	r24, 0x08	; 8
   3f28c:	8b 83       	std	Y+3, r24	; 0x03
					msgBuffer[3] 	=	'A';
   3f28e:	81 e4       	ldi	r24, 0x41	; 65
   3f290:	8c 83       	std	Y+4, r24	; 0x04
					msgBuffer[4] 	=	'V';
   3f292:	86 e5       	ldi	r24, 0x56	; 86
   3f294:	8d 83       	std	Y+5, r24	; 0x05
					msgBuffer[5] 	=	'R';
   3f296:	82 e5       	ldi	r24, 0x52	; 82
   3f298:	8e 83       	std	Y+6, r24	; 0x06
					msgBuffer[6] 	=	'I';
   3f29a:	89 e4       	ldi	r24, 0x49	; 73
   3f29c:	8f 83       	std	Y+7, r24	; 0x07
					msgBuffer[7] 	=	'S';
   3f29e:	83 e5       	ldi	r24, 0x53	; 83
   3f2a0:	88 87       	std	Y+8, r24	; 0x08
					msgBuffer[8] 	=	'P';
   3f2a2:	80 e5       	ldi	r24, 0x50	; 80
   3f2a4:	89 87       	std	Y+9, r24	; 0x09
					msgBuffer[9] 	=	'_';
   3f2a6:	8f e5       	ldi	r24, 0x5F	; 95
   3f2a8:	8a 87       	std	Y+10, r24	; 0x0a
					msgBuffer[10]	=	'2';
   3f2aa:	82 e3       	ldi	r24, 0x32	; 50
   3f2ac:	8b 87       	std	Y+11, r24	; 0x0b
						}
					}
					break;
	#endif
				case CMD_SIGN_ON:
					msgLength		=	11;
   3f2ae:	0b e0       	ldi	r16, 0x0B	; 11
   3f2b0:	10 e0       	ldi	r17, 0x00	; 0
					msgBuffer[6] 	=	'I';
					msgBuffer[7] 	=	'S';
					msgBuffer[8] 	=	'P';
					msgBuffer[9] 	=	'_';
					msgBuffer[10]	=	'2';
					break;
   3f2b2:	9c c1       	rjmp	.+824    	; 0x3f5ec <main+0xffc>

			/*
			 * Now process the STK500 commands, see Atmel Appnote AVR068
			 */

			switch (msgBuffer[0])
   3f2b4:	21 31       	cpi	r18, 0x11	; 17
   3f2b6:	09 f4       	brne	.+2      	; 0x3f2ba <main+0xcca>
   3f2b8:	55 c0       	rjmp	.+170    	; 0x3f364 <main+0xd74>
   3f2ba:	08 f0       	brcs	.+2      	; 0x3f2be <main+0xcce>
   3f2bc:	94 c0       	rjmp	.+296    	; 0x3f3e6 <main+0xdf6>
   3f2be:	20 31       	cpi	r18, 0x10	; 16
   3f2c0:	09 f4       	brne	.+2      	; 0x3f2c4 <main+0xcd4>
   3f2c2:	aa c0       	rjmp	.+340    	; 0x3f418 <main+0xe28>
   3f2c4:	8f c1       	rjmp	.+798    	; 0x3f5e4 <main+0xff4>
   3f2c6:	28 31       	cpi	r18, 0x18	; 24
   3f2c8:	09 f4       	brne	.+2      	; 0x3f2cc <main+0xcdc>
   3f2ca:	66 c0       	rjmp	.+204    	; 0x3f398 <main+0xda8>
   3f2cc:	48 f4       	brcc	.+18     	; 0x3f2e0 <main+0xcf0>
   3f2ce:	25 31       	cpi	r18, 0x15	; 21
   3f2d0:	09 f4       	brne	.+2      	; 0x3f2d4 <main+0xce4>
   3f2d2:	a4 c0       	rjmp	.+328    	; 0x3f41c <main+0xe2c>
   3f2d4:	08 f4       	brcc	.+2      	; 0x3f2d8 <main+0xce8>
   3f2d6:	36 c1       	rjmp	.+620    	; 0x3f544 <main+0xf54>
   3f2d8:	26 31       	cpi	r18, 0x16	; 22
   3f2da:	09 f4       	brne	.+2      	; 0x3f2de <main+0xcee>
   3f2dc:	33 c1       	rjmp	.+614    	; 0x3f544 <main+0xf54>
   3f2de:	82 c1       	rjmp	.+772    	; 0x3f5e4 <main+0xff4>
   3f2e0:	2a 31       	cpi	r18, 0x1A	; 26
   3f2e2:	09 f4       	brne	.+2      	; 0x3f2e6 <main+0xcf6>
   3f2e4:	4d c0       	rjmp	.+154    	; 0x3f380 <main+0xd90>
   3f2e6:	08 f4       	brcc	.+2      	; 0x3f2ea <main+0xcfa>
   3f2e8:	6d c0       	rjmp	.+218    	; 0x3f3c4 <main+0xdd4>
   3f2ea:	2b 31       	cpi	r18, 0x1B	; 27
   3f2ec:	09 f4       	brne	.+2      	; 0x3f2f0 <main+0xd00>
   3f2ee:	3d c0       	rjmp	.+122    	; 0x3f36a <main+0xd7a>
   3f2f0:	2d 31       	cpi	r18, 0x1D	; 29
   3f2f2:	09 f0       	breq	.+2      	; 0x3f2f6 <main+0xd06>
   3f2f4:	77 c1       	rjmp	.+750    	; 0x3f5e4 <main+0xff4>
				case CMD_SPI_MULTI:
					{
						unsigned char answerByte;
						unsigned char flag=0;

						if ( msgBuffer[4]== 0x30 )
   3f2f6:	9d 81       	ldd	r25, Y+5	; 0x05
   3f2f8:	90 33       	cpi	r25, 0x30	; 48
   3f2fa:	39 f4       	brne	.+14     	; 0x3f30a <main+0xd1a>
						{
							unsigned char signatureIndex	=	msgBuffer[6];
   3f2fc:	8f 81       	ldd	r24, Y+7	; 0x07

							if ( signatureIndex == 0 )
   3f2fe:	88 23       	and	r24, r24
   3f300:	b1 f0       	breq	.+44     	; 0x3f32e <main+0xd3e>
							{
								answerByte	=	(SIGNATURE_BYTES >> 16) & 0x000000FF;
							}
							else if ( signatureIndex == 1 )
   3f302:	81 30       	cpi	r24, 0x01	; 1
   3f304:	b1 f4       	brne	.+44     	; 0x3f332 <main+0xd42>
							{
								answerByte	=	(SIGNATURE_BYTES >> 8) & 0x000000FF;
   3f306:	88 e9       	ldi	r24, 0x98	; 152
   3f308:	17 c0       	rjmp	.+46     	; 0x3f338 <main+0xd48>
							else
							{
								answerByte	=	SIGNATURE_BYTES & 0x000000FF;
							}
						}
						else if ( msgBuffer[4] & 0x50 )
   3f30a:	89 2f       	mov	r24, r25
   3f30c:	80 75       	andi	r24, 0x50	; 80
   3f30e:	99 f0       	breq	.+38     	; 0x3f336 <main+0xd46>
						//*	Issue 544: 	stk500v2 bootloader doesn't support reading fuses
						//*	I cant find the docs that say what these are supposed to be but this was figured out by trial and error
						//	answerByte	=	boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS);
						//	answerByte	=	boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS);
						//	answerByte	=	boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS);
							if (msgBuffer[4] == 0x50)
   3f310:	90 35       	cpi	r25, 0x50	; 80
   3f312:	21 f4       	brne	.+8      	; 0x3f31c <main+0xd2c>
							{
								answerByte	=	boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS);
   3f314:	89 e0       	ldi	r24, 0x09	; 9
   3f316:	e0 e0       	ldi	r30, 0x00	; 0
   3f318:	f0 e0       	ldi	r31, 0x00	; 0
   3f31a:	05 c0       	rjmp	.+10     	; 0x3f326 <main+0xd36>
							}
							else if (msgBuffer[4] == 0x58)
   3f31c:	98 35       	cpi	r25, 0x58	; 88
   3f31e:	59 f4       	brne	.+22     	; 0x3f336 <main+0xd46>
							{
								answerByte	=	boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS);
   3f320:	89 e0       	ldi	r24, 0x09	; 9
   3f322:	e3 e0       	ldi	r30, 0x03	; 3
   3f324:	f0 e0       	ldi	r31, 0x00	; 0
   3f326:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3f32a:	84 91       	lpm	r24, Z
   3f32c:	05 c0       	rjmp	.+10     	; 0x3f338 <main+0xd48>
						{
							unsigned char signatureIndex	=	msgBuffer[6];

							if ( signatureIndex == 0 )
							{
								answerByte	=	(SIGNATURE_BYTES >> 16) & 0x000000FF;
   3f32e:	8e e1       	ldi	r24, 0x1E	; 30
   3f330:	03 c0       	rjmp	.+6      	; 0x3f338 <main+0xd48>
							{
								answerByte	=	(SIGNATURE_BYTES >> 8) & 0x000000FF;
							}
							else
							{
								answerByte	=	SIGNATURE_BYTES & 0x000000FF;
   3f332:	81 e0       	ldi	r24, 0x01	; 1
   3f334:	01 c0       	rjmp	.+2      	; 0x3f338 <main+0xd48>
								answerByte	=	0;
							}
						}
						else
						{
							answerByte	=	0; // for all others command are not implemented, return dummy value for AVRDUDE happy <Worapoht>
   3f336:	80 e0       	ldi	r24, 0x00	; 0
						}
						if ( !flag )
						{
							msgLength		=	7;
							msgBuffer[1]	=	STATUS_CMD_OK;
   3f338:	1a 82       	std	Y+2, r1	; 0x02
							msgBuffer[2]	=	0;
   3f33a:	1b 82       	std	Y+3, r1	; 0x03
							msgBuffer[3]	=	msgBuffer[4];
   3f33c:	9c 83       	std	Y+4, r25	; 0x04
							msgBuffer[4]	=	0;
   3f33e:	1d 82       	std	Y+5, r1	; 0x05
							msgBuffer[5]	=	answerByte;
   3f340:	8e 83       	std	Y+6, r24	; 0x06
							msgBuffer[6]	=	STATUS_CMD_OK;
   3f342:	1f 82       	std	Y+7, r1	; 0x07
						{
							answerByte	=	0; // for all others command are not implemented, return dummy value for AVRDUDE happy <Worapoht>
						}
						if ( !flag )
						{
							msgLength		=	7;
   3f344:	07 e0       	ldi	r16, 0x07	; 7
   3f346:	10 e0       	ldi	r17, 0x00	; 0
   3f348:	51 c1       	rjmp	.+674    	; 0x3f5ec <main+0xffc>
   3f34a:	ea 81       	ldd	r30, Y+2	; 0x02
   3f34c:	e0 59       	subi	r30, 0x90	; 144
   3f34e:	e3 30       	cpi	r30, 0x03	; 3
   3f350:	28 f4       	brcc	.+10     	; 0x3f35c <main+0xd6c>
   3f352:	f0 e0       	ldi	r31, 0x00	; 0
   3f354:	e0 50       	subi	r30, 0x00	; 0
   3f356:	fe 4f       	sbci	r31, 0xFE	; 254
   3f358:	80 81       	ld	r24, Z
   3f35a:	01 c0       	rjmp	.+2      	; 0x3f35e <main+0xd6e>

				case CMD_GET_PARAMETER:
					{
						unsigned char value;

						switch(msgBuffer[1])
   3f35c:	80 e0       	ldi	r24, 0x00	; 0
						default:
							value	=	0;
							break;
						}
						msgLength		=	3;
						msgBuffer[1]	=	STATUS_CMD_OK;
   3f35e:	1a 82       	std	Y+2, r1	; 0x02
						msgBuffer[2]	=	value;
   3f360:	8b 83       	std	Y+3, r24	; 0x03
   3f362:	3e c0       	rjmp	.+124    	; 0x3f3e0 <main+0xdf0>
					}
					break;

				case CMD_LEAVE_PROGMODE_ISP:
					isLeave	=	1;
   3f364:	66 24       	eor	r6, r6
   3f366:	63 94       	inc	r6
   3f368:	57 c0       	rjmp	.+174    	; 0x3f418 <main+0xe28>
					msgBuffer[1]	=	STATUS_CMD_OK;
					break;

				case CMD_READ_SIGNATURE_ISP:
					{
						unsigned char signatureIndex	=	msgBuffer[4];
   3f36a:	8d 81       	ldd	r24, Y+5	; 0x05
						unsigned char signature;

						if ( signatureIndex == 0 )
   3f36c:	88 23       	and	r24, r24
   3f36e:	21 f0       	breq	.+8      	; 0x3f378 <main+0xd88>
							signature	=	(SIGNATURE_BYTES >>16) & 0x000000FF;
						else if ( signatureIndex == 1 )
   3f370:	81 30       	cpi	r24, 0x01	; 1
   3f372:	21 f4       	brne	.+8      	; 0x3f37c <main+0xd8c>
							signature	=	(SIGNATURE_BYTES >> 8) & 0x000000FF;
   3f374:	88 e9       	ldi	r24, 0x98	; 152
   3f376:	24 c0       	rjmp	.+72     	; 0x3f3c0 <main+0xdd0>
					{
						unsigned char signatureIndex	=	msgBuffer[4];
						unsigned char signature;

						if ( signatureIndex == 0 )
							signature	=	(SIGNATURE_BYTES >>16) & 0x000000FF;
   3f378:	8e e1       	ldi	r24, 0x1E	; 30
   3f37a:	22 c0       	rjmp	.+68     	; 0x3f3c0 <main+0xdd0>
						else if ( signatureIndex == 1 )
							signature	=	(SIGNATURE_BYTES >> 8) & 0x000000FF;
						else
							signature	=	SIGNATURE_BYTES & 0x000000FF;
   3f37c:	81 e0       	ldi	r24, 0x01	; 1
   3f37e:	20 c0       	rjmp	.+64     	; 0x3f3c0 <main+0xdd0>
					}
					break;

				case CMD_READ_LOCK_ISP:
					msgLength		=	4;
					msgBuffer[1]	=	STATUS_CMD_OK;
   3f380:	1a 82       	std	Y+2, r1	; 0x02
					msgBuffer[2]	=	boot_lock_fuse_bits_get( GET_LOCK_BITS );
   3f382:	e1 e0       	ldi	r30, 0x01	; 1
   3f384:	f0 e0       	ldi	r31, 0x00	; 0
   3f386:	89 e0       	ldi	r24, 0x09	; 9
   3f388:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3f38c:	84 91       	lpm	r24, Z
   3f38e:	8b 83       	std	Y+3, r24	; 0x03
					msgBuffer[3]	=	STATUS_CMD_OK;
   3f390:	1c 82       	std	Y+4, r1	; 0x04
						msgBuffer[3]	=	STATUS_CMD_OK;
					}
					break;

				case CMD_READ_LOCK_ISP:
					msgLength		=	4;
   3f392:	04 e0       	ldi	r16, 0x04	; 4
   3f394:	10 e0       	ldi	r17, 0x00	; 0
					msgBuffer[1]	=	STATUS_CMD_OK;
					msgBuffer[2]	=	boot_lock_fuse_bits_get( GET_LOCK_BITS );
					msgBuffer[3]	=	STATUS_CMD_OK;
					break;
   3f396:	2a c1       	rjmp	.+596    	; 0x3f5ec <main+0xffc>

				case CMD_READ_FUSE_ISP:
					{
						unsigned char fuseBits;

						if ( msgBuffer[2] == 0x50 )
   3f398:	8b 81       	ldd	r24, Y+3	; 0x03
   3f39a:	80 35       	cpi	r24, 0x50	; 80
   3f39c:	59 f4       	brne	.+22     	; 0x3f3b4 <main+0xdc4>
						{
							if ( msgBuffer[3] == 0x08 )
   3f39e:	8c 81       	ldd	r24, Y+4	; 0x04
   3f3a0:	88 30       	cpi	r24, 0x08	; 8
   3f3a2:	21 f4       	brne	.+8      	; 0x3f3ac <main+0xdbc>
								fuseBits	=	boot_lock_fuse_bits_get( GET_EXTENDED_FUSE_BITS );
   3f3a4:	e2 e0       	ldi	r30, 0x02	; 2
   3f3a6:	f0 e0       	ldi	r31, 0x00	; 0
   3f3a8:	89 e0       	ldi	r24, 0x09	; 9
   3f3aa:	07 c0       	rjmp	.+14     	; 0x3f3ba <main+0xdca>
							else
								fuseBits	=	boot_lock_fuse_bits_get( GET_LOW_FUSE_BITS );
   3f3ac:	89 e0       	ldi	r24, 0x09	; 9
   3f3ae:	e0 e0       	ldi	r30, 0x00	; 0
   3f3b0:	f0 e0       	ldi	r31, 0x00	; 0
   3f3b2:	03 c0       	rjmp	.+6      	; 0x3f3ba <main+0xdca>
						}
						else
						{
							fuseBits	=	boot_lock_fuse_bits_get( GET_HIGH_FUSE_BITS );
   3f3b4:	89 e0       	ldi	r24, 0x09	; 9
   3f3b6:	e3 e0       	ldi	r30, 0x03	; 3
   3f3b8:	f0 e0       	ldi	r31, 0x00	; 0
   3f3ba:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3f3be:	84 91       	lpm	r24, Z
						}
						msgLength		=	4;
						msgBuffer[1]	=	STATUS_CMD_OK;
   3f3c0:	1a 82       	std	Y+2, r1	; 0x02
   3f3c2:	e5 cf       	rjmp	.-54     	; 0x3f38e <main+0xd9e>
	#ifndef REMOVE_PROGRAM_LOCK_BIT_SUPPORT
				case CMD_PROGRAM_LOCK_ISP:
					{
						unsigned char lockBits	=	msgBuffer[4];

						lockBits	=	(~lockBits) & 0x3C;	// mask BLBxx bits
   3f3c4:	8d 81       	ldd	r24, Y+5	; 0x05
						boot_lock_bits_set(lockBits);		// and program it
   3f3c6:	83 6c       	ori	r24, 0xC3	; 195
   3f3c8:	99 e0       	ldi	r25, 0x09	; 9
   3f3ca:	e1 e0       	ldi	r30, 0x01	; 1
   3f3cc:	f0 e0       	ldi	r31, 0x00	; 0
   3f3ce:	08 2e       	mov	r0, r24
   3f3d0:	90 93 57 00 	sts	0x0057, r25	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3f3d4:	e8 95       	spm
						boot_spm_busy_wait();
   3f3d6:	07 b6       	in	r0, 0x37	; 55
   3f3d8:	00 fc       	sbrc	r0, 0
   3f3da:	fd cf       	rjmp	.-6      	; 0x3f3d6 <main+0xde6>

						msgLength		=	3;
						msgBuffer[1]	=	STATUS_CMD_OK;
   3f3dc:	1a 82       	std	Y+2, r1	; 0x02
						msgBuffer[2]	=	STATUS_CMD_OK;
   3f3de:	1b 82       	std	Y+3, r1	; 0x03

						lockBits	=	(~lockBits) & 0x3C;	// mask BLBxx bits
						boot_lock_bits_set(lockBits);		// and program it
						boot_spm_busy_wait();

						msgLength		=	3;
   3f3e0:	03 e0       	ldi	r16, 0x03	; 3
   3f3e2:	10 e0       	ldi	r17, 0x00	; 0
						msgBuffer[1]	=	STATUS_CMD_OK;
						msgBuffer[2]	=	STATUS_CMD_OK;
					}
					break;
   3f3e4:	03 c1       	rjmp	.+518    	; 0x3f5ec <main+0xffc>
	#endif
				case CMD_CHIP_ERASE_ISP:
					eraseAddress	=	0;
					msgLength		=	2;
				//	msgBuffer[1]	=	STATUS_CMD_OK;
					msgBuffer[1]	=	STATUS_CMD_FAILED;	//*	isue 543, return FAILED instead of OK
   3f3e6:	80 ec       	ldi	r24, 0xC0	; 192
   3f3e8:	8a 83       	std	Y+2, r24	; 0x02
					}
					break;
	#endif
				case CMD_CHIP_ERASE_ISP:
					eraseAddress	=	0;
					msgLength		=	2;
   3f3ea:	02 e0       	ldi	r16, 0x02	; 2
   3f3ec:	10 e0       	ldi	r17, 0x00	; 0
						msgBuffer[2]	=	STATUS_CMD_OK;
					}
					break;
	#endif
				case CMD_CHIP_ERASE_ISP:
					eraseAddress	=	0;
   3f3ee:	ce 5d       	subi	r28, 0xDE	; 222
   3f3f0:	de 4f       	sbci	r29, 0xFE	; 254
   3f3f2:	18 82       	st	Y, r1
   3f3f4:	19 82       	std	Y+1, r1	; 0x01
   3f3f6:	1a 82       	std	Y+2, r1	; 0x02
   3f3f8:	1b 82       	std	Y+3, r1	; 0x03
   3f3fa:	c2 52       	subi	r28, 0x22	; 34
   3f3fc:	d1 40       	sbci	r29, 0x01	; 1
					msgLength		=	2;
				//	msgBuffer[1]	=	STATUS_CMD_OK;
					msgBuffer[1]	=	STATUS_CMD_FAILED;	//*	isue 543, return FAILED instead of OK
					break;
   3f3fe:	f6 c0       	rjmp	.+492    	; 0x3f5ec <main+0xffc>
   3f400:	6a 81       	ldd	r22, Y+2	; 0x02
   3f402:	7b 81       	ldd	r23, Y+3	; 0x03
   3f404:	8c 81       	ldd	r24, Y+4	; 0x04
   3f406:	9d 81       	ldd	r25, Y+5	; 0x05
   3f408:	0f 94 9a fb 	call	0x3f734	; 0x3f734 <__bswapsi2>

				case CMD_LOAD_ADDRESS:
	#if defined(RAMPZ)
					address	=	( ((address_t)(msgBuffer[1])<<24)|((address_t)(msgBuffer[2])<<16)|((address_t)(msgBuffer[3])<<8)|(msgBuffer[4]) )<<1;
   3f40c:	4b 01       	movw	r8, r22
   3f40e:	5c 01       	movw	r10, r24
   3f410:	88 0c       	add	r8, r8
   3f412:	99 1c       	adc	r9, r9
   3f414:	aa 1c       	adc	r10, r10
   3f416:	bb 1c       	adc	r11, r11
	#else
					address	=	( ((msgBuffer[3])<<8)|(msgBuffer[4]) )<<1;		//convert word to byte address
	#endif
					msgLength		=	2;
					msgBuffer[1]	=	STATUS_CMD_OK;
   3f418:	1a 82       	std	Y+2, r1	; 0x02
   3f41a:	e6 c0       	rjmp	.+460    	; 0x3f5e8 <main+0xff8>
   3f41c:	8a 81       	ldd	r24, Y+2	; 0x02
   3f41e:	9b 81       	ldd	r25, Y+3	; 0x03
   3f420:	98 27       	eor	r25, r24
   3f422:	89 27       	eor	r24, r25
   3f424:	98 27       	eor	r25, r24
						unsigned int	data;
						unsigned char	highByte, lowByte;
						address_t		tempaddress	=	address;


						if ( msgBuffer[0] == CMD_PROGRAM_FLASH_ISP )
   3f426:	23 31       	cpi	r18, 0x13	; 19
   3f428:	09 f0       	breq	.+2      	; 0x3f42c <main+0xe3c>
   3f42a:	60 c0       	rjmp	.+192    	; 0x3f4ec <main+0xefc>
						{
							// erase only main section (bootloader protection)
							if (eraseAddress < APP_END )
   3f42c:	ce 5d       	subi	r28, 0xDE	; 222
   3f42e:	de 4f       	sbci	r29, 0xFE	; 254
   3f430:	28 81       	ld	r18, Y
   3f432:	39 81       	ldd	r19, Y+1	; 0x01
   3f434:	4a 81       	ldd	r20, Y+2	; 0x02
   3f436:	5b 81       	ldd	r21, Y+3	; 0x03
   3f438:	c2 52       	subi	r28, 0x22	; 34
   3f43a:	d1 40       	sbci	r29, 0x01	; 1
   3f43c:	21 15       	cp	r18, r1
   3f43e:	30 4e       	sbci	r19, 0xE0	; 224
   3f440:	43 40       	sbci	r20, 0x03	; 3
   3f442:	51 05       	cpc	r21, r1
   3f444:	28 f5       	brcc	.+74     	; 0x3f490 <main+0xea0>
							{
								boot_page_erase(eraseAddress);	// Perform page erase
   3f446:	23 e0       	ldi	r18, 0x03	; 3
   3f448:	ce 5d       	subi	r28, 0xDE	; 222
   3f44a:	de 4f       	sbci	r29, 0xFE	; 254
   3f44c:	48 81       	ld	r20, Y
   3f44e:	59 81       	ldd	r21, Y+1	; 0x01
   3f450:	6a 81       	ldd	r22, Y+2	; 0x02
   3f452:	7b 81       	ldd	r23, Y+3	; 0x03
   3f454:	c2 52       	subi	r28, 0x22	; 34
   3f456:	d1 40       	sbci	r29, 0x01	; 1
   3f458:	fa 01       	movw	r30, r20
   3f45a:	60 93 5b 00 	sts	0x005B, r22	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
   3f45e:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3f462:	e8 95       	spm
								boot_spm_busy_wait();		// Wait until the memory is erased.
   3f464:	07 b6       	in	r0, 0x37	; 55
   3f466:	00 fc       	sbrc	r0, 0
   3f468:	fd cf       	rjmp	.-6      	; 0x3f464 <main+0xe74>
								eraseAddress += SPM_PAGESIZE;	// point to next page to be erase
   3f46a:	ce 5d       	subi	r28, 0xDE	; 222
   3f46c:	de 4f       	sbci	r29, 0xFE	; 254
   3f46e:	28 81       	ld	r18, Y
   3f470:	39 81       	ldd	r19, Y+1	; 0x01
   3f472:	4a 81       	ldd	r20, Y+2	; 0x02
   3f474:	5b 81       	ldd	r21, Y+3	; 0x03
   3f476:	c2 52       	subi	r28, 0x22	; 34
   3f478:	d1 40       	sbci	r29, 0x01	; 1
   3f47a:	3f 5f       	subi	r19, 0xFF	; 255
   3f47c:	4f 4f       	sbci	r20, 0xFF	; 255
   3f47e:	5f 4f       	sbci	r21, 0xFF	; 255
   3f480:	ce 5d       	subi	r28, 0xDE	; 222
   3f482:	de 4f       	sbci	r29, 0xFE	; 254
   3f484:	28 83       	st	Y, r18
   3f486:	39 83       	std	Y+1, r19	; 0x01
   3f488:	4a 83       	std	Y+2, r20	; 0x02
   3f48a:	5b 83       	std	Y+3, r21	; 0x03
   3f48c:	c2 52       	subi	r28, 0x22	; 34
   3f48e:	d1 40       	sbci	r29, 0x01	; 1
   3f490:	2b 85       	ldd	r18, Y+11	; 0x0b
   3f492:	de 01       	movw	r26, r28
   3f494:	11 96       	adiw	r26, 0x01	; 1
						if ( signatureIndex == 0 )
							signature	=	(SIGNATURE_BYTES >>16) & 0x000000FF;
						else if ( signatureIndex == 1 )
							signature	=	(SIGNATURE_BYTES >> 8) & 0x000000FF;
						else
							signature	=	SIGNATURE_BYTES & 0x000000FF;
   3f496:	b5 01       	movw	r22, r10
   3f498:	a4 01       	movw	r20, r8
							do {
								lowByte		=	*p++;
								highByte 	=	*p++;

								data		=	(highByte << 8) | lowByte;
								boot_page_fill(address,data);
   3f49a:	11 e0       	ldi	r17, 0x01	; 1
   3f49c:	1b 96       	adiw	r26, 0x0b	; 11
   3f49e:	ec 91       	ld	r30, X
   3f4a0:	1b 97       	sbiw	r26, 0x0b	; 11
   3f4a2:	30 e0       	ldi	r19, 0x00	; 0
   3f4a4:	3e 2b       	or	r19, r30
   3f4a6:	09 01       	movw	r0, r18
   3f4a8:	fa 01       	movw	r30, r20
   3f4aa:	60 93 5b 00 	sts	0x005B, r22	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
   3f4ae:	10 93 57 00 	sts	0x0057, r17	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3f4b2:	e8 95       	spm
   3f4b4:	11 24       	eor	r1, r1

								address	=	address + 2;	// Select next word in memory
   3f4b6:	4e 5f       	subi	r20, 0xFE	; 254
   3f4b8:	5f 4f       	sbci	r21, 0xFF	; 255
   3f4ba:	6f 4f       	sbci	r22, 0xFF	; 255
   3f4bc:	7f 4f       	sbci	r23, 0xFF	; 255
								size	-=	2;				// Reduce number of bytes to write by two
   3f4be:	02 97       	sbiw	r24, 0x02	; 2
   3f4c0:	12 96       	adiw	r26, 0x02	; 2
							} while (size);					// Loop until all bytes written
   3f4c2:	00 97       	sbiw	r24, 0x00	; 0
   3f4c4:	21 f0       	breq	.+8      	; 0x3f4ce <main+0xede>
							}

							/* Write FLASH */
							do {
								lowByte		=	*p++;
								highByte 	=	*p++;
   3f4c6:	1a 96       	adiw	r26, 0x0a	; 10
   3f4c8:	2c 91       	ld	r18, X
   3f4ca:	1a 97       	sbiw	r26, 0x0a	; 10
   3f4cc:	e7 cf       	rjmp	.-50     	; 0x3f49c <main+0xeac>

								address	=	address + 2;	// Select next word in memory
								size	-=	2;				// Reduce number of bytes to write by two
							} while (size);					// Loop until all bytes written

							boot_page_write(tempaddress);
   3f4ce:	35 e0       	ldi	r19, 0x05	; 5
   3f4d0:	f4 01       	movw	r30, r8
   3f4d2:	a0 92 5b 00 	sts	0x005B, r10	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
   3f4d6:	30 93 57 00 	sts	0x0057, r19	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3f4da:	e8 95       	spm
							boot_spm_busy_wait();
   3f4dc:	07 b6       	in	r0, 0x37	; 55
   3f4de:	00 fc       	sbrc	r0, 0
   3f4e0:	fd cf       	rjmp	.-6      	; 0x3f4dc <main+0xeec>
							boot_rww_enable();				// Re-enable the RWW section
   3f4e2:	81 e1       	ldi	r24, 0x11	; 17
   3f4e4:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3f4e8:	e8 95       	spm
   3f4ea:	28 c0       	rjmp	.+80     	; 0x3f53c <main+0xf4c>
   3f4ec:	fe 01       	movw	r30, r28
   3f4ee:	31 96       	adiw	r30, 0x01	; 1
   3f4f0:	9f 01       	movw	r18, r30
   3f4f2:	28 0f       	add	r18, r24
   3f4f4:	39 1f       	adc	r19, r25
						unsigned int	data;
						unsigned char	highByte, lowByte;
						address_t		tempaddress	=	address;


						if ( msgBuffer[0] == CMD_PROGRAM_FLASH_ISP )
   3f4f6:	b5 01       	movw	r22, r10
   3f4f8:	a4 01       	movw	r20, r8
						//*	issue 543, this should work, It has not been tested.
					//	#if (!defined(__AVR_ATmega1280__) && !defined(__AVR_ATmega2560__)  && !defined(__AVR_ATmega2561__)  && !defined(__AVR_ATmega1284P__)  && !defined(__AVR_ATmega640__))
						#if (defined(EEARL) && defined(EEARH)  && defined(EEMWE)  && defined(EEWE)  && defined(EEDR))
							/* write EEPROM */
							do {
								EEARL	=	address;			// Setup EEPROM address
   3f4fa:	41 bd       	out	0x21, r20	; 33
								EEARH	=	(address >> 8);
   3f4fc:	25 2e       	mov	r2, r21
   3f4fe:	36 2e       	mov	r3, r22
   3f500:	47 2e       	mov	r4, r23
   3f502:	55 24       	eor	r5, r5
   3f504:	22 bc       	out	0x22, r2	; 34
								address++;						// Select next EEPROM byte
   3f506:	4f 5f       	subi	r20, 0xFF	; 255
   3f508:	5f 4f       	sbci	r21, 0xFF	; 255
   3f50a:	6f 4f       	sbci	r22, 0xFF	; 255
   3f50c:	7f 4f       	sbci	r23, 0xFF	; 255

								EEDR	=	*p++;				// get byte from buffer
   3f50e:	a2 85       	ldd	r26, Z+10	; 0x0a
   3f510:	a0 bd       	out	0x20, r26	; 32
								EECR	|=	(1<<EEMWE);			// Write data into EEPROM
   3f512:	fa 9a       	sbi	0x1f, 2	; 31
								EECR	|=	(1<<EEWE);
   3f514:	f9 9a       	sbi	0x1f, 1	; 31

								while (EECR & (1<<EEWE));	// Wait for write operation to finish
   3f516:	f9 99       	sbic	0x1f, 1	; 31
   3f518:	fe cf       	rjmp	.-4      	; 0x3f516 <main+0xf26>
   3f51a:	31 96       	adiw	r30, 0x01	; 1
								size--;						// Decrease number of bytes to write
							} while (size);					// Loop until all bytes written
   3f51c:	2e 17       	cp	r18, r30
   3f51e:	3f 07       	cpc	r19, r31
   3f520:	61 f7       	brne	.-40     	; 0x3f4fa <main+0xf0a>
   3f522:	ac 01       	movw	r20, r24
   3f524:	41 50       	subi	r20, 0x01	; 1
   3f526:	51 09       	sbc	r21, r1
   3f528:	60 e0       	ldi	r22, 0x00	; 0
   3f52a:	70 e0       	ldi	r23, 0x00	; 0
   3f52c:	4f 5f       	subi	r20, 0xFF	; 255
   3f52e:	5f 4f       	sbci	r21, 0xFF	; 255
   3f530:	6f 4f       	sbci	r22, 0xFF	; 255
   3f532:	7f 4f       	sbci	r23, 0xFF	; 255
   3f534:	48 0d       	add	r20, r8
   3f536:	59 1d       	adc	r21, r9
   3f538:	6a 1d       	adc	r22, r10
   3f53a:	7b 1d       	adc	r23, r11
						#endif
						}
							msgLength	=	2;
						msgBuffer[1]	=	STATUS_CMD_OK;
   3f53c:	1a 82       	std	Y+2, r1	; 0x02
					}
					break;
   3f53e:	4a 01       	movw	r8, r20
   3f540:	5b 01       	movw	r10, r22
   3f542:	52 c0       	rjmp	.+164    	; 0x3f5e8 <main+0xff8>
   3f544:	8a 81       	ldd	r24, Y+2	; 0x02
   3f546:	9b 81       	ldd	r25, Y+3	; 0x03
   3f548:	98 27       	eor	r25, r24
   3f54a:	89 27       	eor	r24, r25
   3f54c:	98 27       	eor	r25, r24
				case CMD_READ_FLASH_ISP:
				case CMD_READ_EEPROM_ISP:
					{
						unsigned int	size	=	((msgBuffer[1])<<8) | msgBuffer[2];
						unsigned char	*p		=	msgBuffer+1;
						msgLength				=	size+3;
   3f54e:	8c 01       	movw	r16, r24
   3f550:	0d 5f       	subi	r16, 0xFD	; 253
   3f552:	1f 4f       	sbci	r17, 0xFF	; 255

						*p++	=	STATUS_CMD_OK;
   3f554:	1a 82       	std	Y+2, r1	; 0x02
						if (msgBuffer[0] == CMD_READ_FLASH_ISP )
   3f556:	24 31       	cpi	r18, 0x14	; 20
   3f558:	c1 f4       	brne	.+48     	; 0x3f58a <main+0xf9a>
   3f55a:	de 01       	movw	r26, r28
   3f55c:	11 96       	adiw	r26, 0x01	; 1

							// Read FLASH
							do {
						//#if defined(RAMPZ)
						#if (FLASHEND > 0x10000)
								data	=	pgm_read_word_far(address);
   3f55e:	ab be       	out	0x3b, r10	; 59
   3f560:	f4 01       	movw	r30, r8
   3f562:	27 91       	elpm	r18, Z+
   3f564:	36 91       	elpm	r19, Z
						#else
								data	=	pgm_read_word_near(address);
						#endif
								*p++	=	(unsigned char)data;		//LSB
   3f566:	12 96       	adiw	r26, 0x02	; 2
   3f568:	2c 93       	st	X, r18
   3f56a:	12 97       	sbiw	r26, 0x02	; 2
   3f56c:	fd 01       	movw	r30, r26
   3f56e:	34 96       	adiw	r30, 0x04	; 4
								*p++	=	(unsigned char)(data >> 8);	//MSB
   3f570:	13 96       	adiw	r26, 0x03	; 3
   3f572:	3c 93       	st	X, r19
   3f574:	13 97       	sbiw	r26, 0x03	; 3
								address	+=	2;							// Select next word in memory
   3f576:	42 e0       	ldi	r20, 0x02	; 2
   3f578:	84 0e       	add	r8, r20
   3f57a:	91 1c       	adc	r9, r1
   3f57c:	a1 1c       	adc	r10, r1
   3f57e:	b1 1c       	adc	r11, r1
								size	-=	2;
   3f580:	02 97       	sbiw	r24, 0x02	; 2
   3f582:	12 96       	adiw	r26, 0x02	; 2
							}while (size);
   3f584:	00 97       	sbiw	r24, 0x00	; 0
   3f586:	59 f7       	brne	.-42     	; 0x3f55e <main+0xf6e>
   3f588:	2b c0       	rjmp	.+86     	; 0x3f5e0 <main+0xff0>
   3f58a:	fe 01       	movw	r30, r28
   3f58c:	31 96       	adiw	r30, 0x01	; 1
   3f58e:	9f 01       	movw	r18, r30
   3f590:	28 0f       	add	r18, r24
   3f592:	39 1f       	adc	r19, r25
						unsigned int	size	=	((msgBuffer[1])<<8) | msgBuffer[2];
						unsigned char	*p		=	msgBuffer+1;
						msgLength				=	size+3;

						*p++	=	STATUS_CMD_OK;
						if (msgBuffer[0] == CMD_READ_FLASH_ISP )
   3f594:	b5 01       	movw	r22, r10
   3f596:	a4 01       	movw	r20, r8
						}
						else
						{
							/* Read EEPROM */
							do {
								EEARL	=	address;			// Setup EEPROM address
   3f598:	41 bd       	out	0x21, r20	; 33
								EEARH	=	((address >> 8));
   3f59a:	25 2e       	mov	r2, r21
   3f59c:	36 2e       	mov	r3, r22
   3f59e:	47 2e       	mov	r4, r23
   3f5a0:	55 24       	eor	r5, r5
   3f5a2:	22 bc       	out	0x22, r2	; 34
								address++;					// Select next EEPROM byte
   3f5a4:	4f 5f       	subi	r20, 0xFF	; 255
   3f5a6:	5f 4f       	sbci	r21, 0xFF	; 255
   3f5a8:	6f 4f       	sbci	r22, 0xFF	; 255
   3f5aa:	7f 4f       	sbci	r23, 0xFF	; 255
								EECR	|=	(1<<EERE);			// Read EEPROM
   3f5ac:	f8 9a       	sbi	0x1f, 0	; 31
								*p++	=	EEDR;				// Send EEPROM data
   3f5ae:	a0 b5       	in	r26, 0x20	; 32
   3f5b0:	a2 83       	std	Z+2, r26	; 0x02
   3f5b2:	31 96       	adiw	r30, 0x01	; 1
								size--;
							} while (size);
   3f5b4:	2e 17       	cp	r18, r30
   3f5b6:	3f 07       	cpc	r19, r31
   3f5b8:	79 f7       	brne	.-34     	; 0x3f598 <main+0xfa8>
   3f5ba:	ac 01       	movw	r20, r24
   3f5bc:	41 50       	subi	r20, 0x01	; 1
   3f5be:	51 09       	sbc	r21, r1
   3f5c0:	60 e0       	ldi	r22, 0x00	; 0
   3f5c2:	70 e0       	ldi	r23, 0x00	; 0
   3f5c4:	4f 5f       	subi	r20, 0xFF	; 255
   3f5c6:	5f 4f       	sbci	r21, 0xFF	; 255
   3f5c8:	6f 4f       	sbci	r22, 0xFF	; 255
   3f5ca:	7f 4f       	sbci	r23, 0xFF	; 255
   3f5cc:	84 0e       	add	r8, r20
   3f5ce:	95 1e       	adc	r9, r21
   3f5d0:	a6 1e       	adc	r10, r22
   3f5d2:	b7 1e       	adc	r11, r23
   3f5d4:	e3 e0       	ldi	r30, 0x03	; 3
   3f5d6:	f0 e0       	ldi	r31, 0x00	; 0
   3f5d8:	ec 0f       	add	r30, r28
   3f5da:	fd 1f       	adc	r31, r29
   3f5dc:	e8 0f       	add	r30, r24
   3f5de:	f9 1f       	adc	r31, r25
						}
						*p++	=	STATUS_CMD_OK;
   3f5e0:	10 82       	st	Z, r1
					}
					break;
   3f5e2:	04 c0       	rjmp	.+8      	; 0x3f5ec <main+0xffc>

				default:
					msgLength		=	2;
					msgBuffer[1]	=	STATUS_CMD_FAILED;
   3f5e4:	80 ec       	ldi	r24, 0xC0	; 192
   3f5e6:	8a 83       	std	Y+2, r24	; 0x02
						*p++	=	STATUS_CMD_OK;
					}
					break;

				default:
					msgLength		=	2;
   3f5e8:	02 e0       	ldi	r16, 0x02	; 2
   3f5ea:	10 e0       	ldi	r17, 0x00	; 0
			}

			/*
			 * Now send answer message back
			 */
			sendchar(MESSAGE_START);
   3f5ec:	8b e1       	ldi	r24, 0x1B	; 27
   3f5ee:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <sendchar>
			checksum	=	MESSAGE_START^0;

			sendchar(seqNum);
   3f5f2:	ca 5d       	subi	r28, 0xDA	; 218
   3f5f4:	de 4f       	sbci	r29, 0xFE	; 254
   3f5f6:	88 81       	ld	r24, Y
   3f5f8:	c6 52       	subi	r28, 0x26	; 38
   3f5fa:	d1 40       	sbci	r29, 0x01	; 1
   3f5fc:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <sendchar>
			checksum	^=	seqNum;

			c			=	((msgLength>>8)&0xFF);
			sendchar(c);
   3f600:	81 2f       	mov	r24, r17
   3f602:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <sendchar>
			checksum	^=	c;

			c			=	msgLength&0x00FF;
			sendchar(c);
   3f606:	80 2f       	mov	r24, r16
   3f608:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <sendchar>
   3f60c:	85 e1       	ldi	r24, 0x15	; 21
   3f60e:	ca 5d       	subi	r28, 0xDA	; 218
   3f610:	de 4f       	sbci	r29, 0xFE	; 254
   3f612:	78 80       	ld	r7, Y
   3f614:	c6 52       	subi	r28, 0x26	; 38
   3f616:	d1 40       	sbci	r29, 0x01	; 1
   3f618:	78 26       	eor	r7, r24
   3f61a:	70 26       	eor	r7, r16
			checksum ^= c;

			sendchar(TOKEN);
   3f61c:	8e e0       	ldi	r24, 0x0E	; 14
   3f61e:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <sendchar>
			checksum ^= TOKEN;
   3f622:	71 26       	eor	r7, r17
   3f624:	be 01       	movw	r22, r28
   3f626:	6f 5f       	subi	r22, 0xFF	; 255
   3f628:	7f 4f       	sbci	r23, 0xFF	; 255
   3f62a:	6b 01       	movw	r12, r22
   3f62c:	06 0f       	add	r16, r22
   3f62e:	17 1f       	adc	r17, r23

			p	=	msgBuffer;
			while ( msgLength )
   3f630:	c0 16       	cp	r12, r16
   3f632:	d1 06       	cpc	r13, r17
   3f634:	41 f0       	breq	.+16     	; 0x3f646 <main+0x1056>
			{
				c	=	*p++;
   3f636:	d6 01       	movw	r26, r12
   3f638:	5d 90       	ld	r5, X+
   3f63a:	6d 01       	movw	r12, r26
				sendchar(c);
   3f63c:	85 2d       	mov	r24, r5
   3f63e:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <sendchar>
				checksum ^=c;
   3f642:	75 24       	eor	r7, r5
   3f644:	f5 cf       	rjmp	.-22     	; 0x3f630 <main+0x1040>
				msgLength--;
			}
			sendchar(checksum);
   3f646:	87 2d       	mov	r24, r7
   3f648:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <sendchar>
			seqNum++;
   3f64c:	ca 5d       	subi	r28, 0xDA	; 218
   3f64e:	de 4f       	sbci	r29, 0xFE	; 254
   3f650:	b8 81       	ld	r27, Y
   3f652:	c6 52       	subi	r28, 0x26	; 38
   3f654:	d1 40       	sbci	r29, 0x01	; 1
   3f656:	bf 5f       	subi	r27, 0xFF	; 255
   3f658:	ca 5d       	subi	r28, 0xDA	; 218
   3f65a:	de 4f       	sbci	r29, 0xFE	; 254
   3f65c:	b8 83       	st	Y, r27
   3f65e:	c6 52       	subi	r28, 0x26	; 38
   3f660:	d1 40       	sbci	r29, 0x01	; 1
	
		#ifndef REMOVE_BOOTLOADER_LED
			//*	<MLS>	toggle the LED
			PROGLED_PORT	^=	(1<<PROGLED_PIN);	// active high LED ON
   3f662:	85 b1       	in	r24, 0x05	; 5
   3f664:	80 58       	subi	r24, 0x80	; 128
   3f666:	85 b9       	out	0x05, r24	; 5
   3f668:	00 e0       	ldi	r16, 0x00	; 0
   3f66a:	10 e0       	ldi	r17, 0x00	; 0


	if (boot_state==1)
	{
		//*	main loop
		while (!isLeave)
   3f66c:	66 20       	and	r6, r6
   3f66e:	11 f4       	brne	.+4      	; 0x3f674 <main+0x1084>
   3f670:	0d 94 83 f3 	jmp	0x3e706	; 0x3e706 <main+0x116>
	delay_ms(100);
#endif


#ifndef REMOVE_BOOTLOADER_LED
	PROGLED_DDR		&=	~(1<<PROGLED_PIN);	// set to default
   3f674:	27 98       	cbi	0x04, 7	; 4
	PROGLED_PORT	&=	~(1<<PROGLED_PIN);	// active low LED OFF
   3f676:	2f 98       	cbi	0x05, 7	; 5
//	PROGLED_PORT	|=	(1<<PROGLED_PIN);	// active high LED OFf
	delay_ms(100);							// delay after exit
   3f678:	84 e6       	ldi	r24, 0x64	; 100
   3f67a:	90 e0       	ldi	r25, 0x00	; 0
   3f67c:	0f 94 c0 f1 	call	0x3e380	; 0x3e380 <delay_ms>
#endif


	asm volatile ("nop");			// wait until port has changed
   3f680:	00 00       	nop

	/*
	 * Now leave bootloader
	 */

	UART_STATUS_REG	&=	0xfd;
   3f682:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
   3f686:	8d 7f       	andi	r24, 0xFD	; 253
   3f688:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
	boot_rww_enable();				// enable application section
   3f68c:	81 e1       	ldi	r24, 0x11	; 17
   3f68e:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3f692:	e8 95       	spm


	asm volatile(
   3f694:	ee 27       	eor	r30, r30
   3f696:	ff 27       	eor	r31, r31
   3f698:	09 94       	ijmp
   3f69a:	ff cf       	rjmp	.-2      	; 0x3f69a <main+0x10aa>
				{
					case ST_START:
						if ( c == MESSAGE_START )
						{
							msgParseState	=	ST_GET_SEQ_NUM;
							checksum		=	MESSAGE_START^0;
   3f69c:	8b e1       	ldi	r24, 0x1B	; 27
   3f69e:	78 2e       	mov	r7, r24
				switch (msgParseState)
				{
					case ST_START:
						if ( c == MESSAGE_START )
						{
							msgParseState	=	ST_GET_SEQ_NUM;
   3f6a0:	81 e0       	ldi	r24, 0x01	; 1
   3f6a2:	7e cd       	rjmp	.-1284   	; 0x3f1a0 <main+0xbb0>
						break;
					}
				}
				else
				{
					exPointCntr	=	0;
   3f6a4:	e1 2c       	mov	r14, r1
   3f6a6:	f1 2c       	mov	r15, r1
   3f6a8:	0d c0       	rjmp	.+26     	; 0x3f6c4 <main+0x10d4>
   3f6aa:	c9 5d       	subi	r28, 0xD9	; 217
   3f6ac:	de 4f       	sbci	r29, 0xFE	; 254
   3f6ae:	39 83       	std	Y+1, r19	; 0x01
   3f6b0:	28 83       	st	Y, r18
   3f6b2:	c7 52       	subi	r28, 0x27	; 39
   3f6b4:	d1 40       	sbci	r29, 0x01	; 1
					case ST_GET_DATA:
						msgBuffer[ii++]	=	c;
						checksum		^=	c;
						if (ii == msgLength )
						{
							msgParseState	=	ST_GET_CHECK;
   3f6b6:	86 e0       	ldi	r24, 0x06	; 6
   3f6b8:	73 cd       	rjmp	.-1306   	; 0x3f1a0 <main+0xbb0>
				{
					exPointCntr	=	0;
				}
			#endif

				switch (msgParseState)
   3f6ba:	81 30       	cpi	r24, 0x01	; 1
   3f6bc:	09 f4       	brne	.+2      	; 0x3f6c0 <main+0x10d0>
   3f6be:	75 cd       	rjmp	.-1302   	; 0x3f1aa <main+0xbba>
   3f6c0:	08 f0       	brcs	.+2      	; 0x3f6c4 <main+0x10d4>
   3f6c2:	7d cd       	rjmp	.-1286   	; 0x3f1be <main+0xbce>
   3f6c4:	80 e0       	ldi	r24, 0x00	; 0
   3f6c6:	6c cd       	rjmp	.-1320   	; 0x3f1a0 <main+0xbb0>

0003f6c8 <__divmodhi4>:
   3f6c8:	97 fb       	bst	r25, 7
   3f6ca:	07 2e       	mov	r0, r23
   3f6cc:	16 f4       	brtc	.+4      	; 0x3f6d2 <__divmodhi4+0xa>
   3f6ce:	00 94       	com	r0
   3f6d0:	07 d0       	rcall	.+14     	; 0x3f6e0 <__divmodhi4_neg1>
   3f6d2:	77 fd       	sbrc	r23, 7
   3f6d4:	09 d0       	rcall	.+18     	; 0x3f6e8 <__divmodhi4_neg2>
   3f6d6:	0f 94 a1 fb 	call	0x3f742	; 0x3f742 <__udivmodhi4>
   3f6da:	07 fc       	sbrc	r0, 7
   3f6dc:	05 d0       	rcall	.+10     	; 0x3f6e8 <__divmodhi4_neg2>
   3f6de:	3e f4       	brtc	.+14     	; 0x3f6ee <__divmodhi4_exit>

0003f6e0 <__divmodhi4_neg1>:
   3f6e0:	90 95       	com	r25
   3f6e2:	81 95       	neg	r24
   3f6e4:	9f 4f       	sbci	r25, 0xFF	; 255
   3f6e6:	08 95       	ret

0003f6e8 <__divmodhi4_neg2>:
   3f6e8:	70 95       	com	r23
   3f6ea:	61 95       	neg	r22
   3f6ec:	7f 4f       	sbci	r23, 0xFF	; 255

0003f6ee <__divmodhi4_exit>:
   3f6ee:	08 95       	ret

0003f6f0 <__udivmodsi4>:
   3f6f0:	a1 e2       	ldi	r26, 0x21	; 33
   3f6f2:	1a 2e       	mov	r1, r26
   3f6f4:	aa 1b       	sub	r26, r26
   3f6f6:	bb 1b       	sub	r27, r27
   3f6f8:	fd 01       	movw	r30, r26
   3f6fa:	0d c0       	rjmp	.+26     	; 0x3f716 <__udivmodsi4_ep>

0003f6fc <__udivmodsi4_loop>:
   3f6fc:	aa 1f       	adc	r26, r26
   3f6fe:	bb 1f       	adc	r27, r27
   3f700:	ee 1f       	adc	r30, r30
   3f702:	ff 1f       	adc	r31, r31
   3f704:	a2 17       	cp	r26, r18
   3f706:	b3 07       	cpc	r27, r19
   3f708:	e4 07       	cpc	r30, r20
   3f70a:	f5 07       	cpc	r31, r21
   3f70c:	20 f0       	brcs	.+8      	; 0x3f716 <__udivmodsi4_ep>
   3f70e:	a2 1b       	sub	r26, r18
   3f710:	b3 0b       	sbc	r27, r19
   3f712:	e4 0b       	sbc	r30, r20
   3f714:	f5 0b       	sbc	r31, r21

0003f716 <__udivmodsi4_ep>:
   3f716:	66 1f       	adc	r22, r22
   3f718:	77 1f       	adc	r23, r23
   3f71a:	88 1f       	adc	r24, r24
   3f71c:	99 1f       	adc	r25, r25
   3f71e:	1a 94       	dec	r1
   3f720:	69 f7       	brne	.-38     	; 0x3f6fc <__udivmodsi4_loop>
   3f722:	60 95       	com	r22
   3f724:	70 95       	com	r23
   3f726:	80 95       	com	r24
   3f728:	90 95       	com	r25
   3f72a:	9b 01       	movw	r18, r22
   3f72c:	ac 01       	movw	r20, r24
   3f72e:	bd 01       	movw	r22, r26
   3f730:	cf 01       	movw	r24, r30
   3f732:	08 95       	ret

0003f734 <__bswapsi2>:
   3f734:	69 27       	eor	r22, r25
   3f736:	96 27       	eor	r25, r22
   3f738:	69 27       	eor	r22, r25
   3f73a:	78 27       	eor	r23, r24
   3f73c:	87 27       	eor	r24, r23
   3f73e:	78 27       	eor	r23, r24
   3f740:	08 95       	ret

0003f742 <__udivmodhi4>:
   3f742:	aa 1b       	sub	r26, r26
   3f744:	bb 1b       	sub	r27, r27
   3f746:	51 e1       	ldi	r21, 0x11	; 17
   3f748:	07 c0       	rjmp	.+14     	; 0x3f758 <__udivmodhi4_ep>

0003f74a <__udivmodhi4_loop>:
   3f74a:	aa 1f       	adc	r26, r26
   3f74c:	bb 1f       	adc	r27, r27
   3f74e:	a6 17       	cp	r26, r22
   3f750:	b7 07       	cpc	r27, r23
   3f752:	10 f0       	brcs	.+4      	; 0x3f758 <__udivmodhi4_ep>
   3f754:	a6 1b       	sub	r26, r22
   3f756:	b7 0b       	sbc	r27, r23

0003f758 <__udivmodhi4_ep>:
   3f758:	88 1f       	adc	r24, r24
   3f75a:	99 1f       	adc	r25, r25
   3f75c:	5a 95       	dec	r21
   3f75e:	a9 f7       	brne	.-22     	; 0x3f74a <__udivmodhi4_loop>
   3f760:	80 95       	com	r24
   3f762:	90 95       	com	r25
   3f764:	bc 01       	movw	r22, r24
   3f766:	cd 01       	movw	r24, r26
   3f768:	08 95       	ret

0003f76a <eeprom_read_byte>:
   3f76a:	f9 99       	sbic	0x1f, 1	; 31
   3f76c:	fe cf       	rjmp	.-4      	; 0x3f76a <eeprom_read_byte>
   3f76e:	92 bd       	out	0x22, r25	; 34
   3f770:	81 bd       	out	0x21, r24	; 33
   3f772:	f8 9a       	sbi	0x1f, 0	; 31
   3f774:	99 27       	eor	r25, r25
   3f776:	80 b5       	in	r24, 0x20	; 32
   3f778:	08 95       	ret

0003f77a <eeprom_write_byte>:
   3f77a:	26 2f       	mov	r18, r22

0003f77c <eeprom_write_r18>:
   3f77c:	f9 99       	sbic	0x1f, 1	; 31
   3f77e:	fe cf       	rjmp	.-4      	; 0x3f77c <eeprom_write_r18>
   3f780:	1f ba       	out	0x1f, r1	; 31
   3f782:	92 bd       	out	0x22, r25	; 34
   3f784:	81 bd       	out	0x21, r24	; 33
   3f786:	20 bd       	out	0x20, r18	; 32
   3f788:	0f b6       	in	r0, 0x3f	; 63
   3f78a:	f8 94       	cli
   3f78c:	fa 9a       	sbi	0x1f, 2	; 31
   3f78e:	f9 9a       	sbi	0x1f, 1	; 31
   3f790:	0f be       	out	0x3f, r0	; 63
   3f792:	01 96       	adiw	r24, 0x01	; 1
   3f794:	08 95       	ret

0003f796 <_exit>:
   3f796:	f8 94       	cli

0003f798 <__stop_program>:
   3f798:	ff cf       	rjmp	.-2      	; 0x3f798 <__stop_program>
